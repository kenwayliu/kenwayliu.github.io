<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[猫在云端]]></title>
  <subtitle><![CDATA[做自己喜欢做的事，相信自己]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://cloudbps.com/"/>
  <updated>2015-01-10T17:55:23.597Z</updated>
  <id>http://cloudbps.com/</id>
  
  <author>
    <name><![CDATA[Tom.liu]]></name>
    <email><![CDATA[cloudbps@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Nginx调优参数]]></title>
    <link href="http://cloudbps.com/2015/01/10/nginx_tun/"/>
    <id>http://cloudbps.com/2015/01/10/nginx_tun/</id>
    <published>2015-01-10T04:44:33.000Z</published>
    <updated>2015-01-10T16:44:45.000Z</updated>
    <content type="html"><![CDATA[<p>一般来说nginx 配置文件中对优化比较有作用的为以下几项：</p>
<h3 id="配置文件优化">配置文件优化</h3>
<a id="more"></a>

<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">worker_processes <span class="number">8</span>;</div><div class="line"></div><div class="line">nginx 进程数，建议按照cpu 数目来指定，一般为它的倍数。</div><div class="line"></div><div class="line">worker_cpu_affinity <span class="number">00000001</span> <span class="number">00000010</span> <span class="number">00000100</span> <span class="number">00001000</span> <span class="number">00010000</span> <span class="number">00100000</span></div><div class="line"><span class="number">01000000</span> <span class="number">10000000</span>;</div><div class="line"></div><div class="line">为每个进程分配cpu，上例中将 <span class="number">8</span> 个进程分配到 <span class="number">8</span> 个 cpu，当然可以写多个，或者将一</div><div class="line">个进程分配到多个 cpu。</div><div class="line"></div><div class="line">worker_rlimit_nofile <span class="number">102400</span>;</div><div class="line"></div><div class="line">这个指令是指当一个 nginx 进程打开的最多文件描述符数目，理论值应该是最多打开文</div><div class="line">件数（ulimit -n）与 nginx 进程数相除，但是 nginx 分配请求并不是那么均匀，所以最好与 ulimit</div><div class="line">-n 的值保持一致。</div><div class="line">use epoll;</div><div class="line"></div><div class="line">使用epoll 的<span class="constant">I</span>/<span class="constant">O</span> 模型，这个不用说了吧。</div><div class="line"></div><div class="line">worker_connections <span class="number">102400</span>;</div><div class="line"></div><div class="line">每个进程允许的最多连接数 ，理论上每台 nginx 服务器的最大连接数为</div><div class="line">worker_processes*worker_connections。</div><div class="line"></div><div class="line">keepalive_timeout <span class="number">60</span>;</div><div class="line"></div><div class="line">keepalive 超时时间。</div><div class="line"></div><div class="line">client_header_buffer_size <span class="number">4</span>k;</div><div class="line"></div><div class="line">客户端请求头部的缓冲区大小，这个可以根据你的系统分页大小来设置，一般一个请求</div><div class="line">头的大小不会超过 <span class="number">1</span>k，不过由于一般系统分页都要大于 <span class="number">1</span>k，所以这里设置为分页大小。分</div><div class="line">页大小可以用命令getconf <span class="constant">PAGESIZE</span> 取得。</div><div class="line"></div><div class="line">open_file_cache max=<span class="number">102400</span> inactive=<span class="number">20</span>s;</div><div class="line"></div><div class="line">这个将为打开文件指定缓存，默认是没有启用的，max 指定缓存数量，建议和打开文件</div><div class="line">数一致，inactive 是指经过多长时间文件没被请求后删除缓存。</div><div class="line"></div><div class="line">open_file_cache_valid <span class="number">30</span>s;</div><div class="line"></div><div class="line">这个是指多长时间检查一次缓存的有效信息。</div><div class="line"></div><div class="line">open_file_cache_min_uses <span class="number">1</span>;</div><div class="line"></div><div class="line">open_file_cache 指令中的 inactive 参数时间内文件的最少使用次数，如果超过这个数字，文</div><div class="line">件描述符一直是在缓存中打开的，如上例，如果有一个文件在 inactive 时间内一次没被使用，</div><div class="line">它将被移除。</div></pre></td></tr></table></figure>

<h4 id="内核优化">内核优化</h4>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">关于内核参数的优化：</div><div class="line"></div><div class="line">net.ipv4.tcp_max_tw_buckets = <span class="number">6000</span></div><div class="line"></div><div class="line">timewait 的数量，默认是 <span class="number">180000</span>。</div><div class="line"></div><div class="line">net.ipv4.ip_local_port_range = <span class="number">1024</span> <span class="number">65000</span></div><div class="line"></div><div class="line">允许系统打开的端口范围。</div><div class="line"></div><div class="line">net.ipv4.tcp_tw_recycle = <span class="number">1</span></div><div class="line"></div><div class="line">启用timewait 快速回收。</div><div class="line"></div><div class="line">net.ipv4.tcp_tw_reuse = <span class="number">1</span></div><div class="line"></div><div class="line">开启重用。允许将<span class="constant">TIME</span>-<span class="constant">WAIT</span> sockets 重新用于新的<span class="constant">TCP</span> 连接。</div><div class="line"></div><div class="line">net.ipv4.tcp_syncookies = <span class="number">1</span></div><div class="line"></div><div class="line">开启<span class="constant">SYN</span> <span class="constant">Cookies</span>，当出现<span class="constant">SYN</span> 等待队列溢出时，启用cookies 来处理。</div><div class="line"></div><div class="line">net.core.somaxconn = <span class="number">262144</span></div><div class="line"></div><div class="line">web 应用中 listen 函数的 backlog 默认会给我们内核参数的 net.core.somaxconn 限制到</div><div class="line"><span class="number">128</span>，而 nginx 定义的 <span class="constant">NGX_LISTEN_BACKLOG</span> 默认为<span class="number">511</span>，所以有必要调整这个值。</div><div class="line"></div><div class="line">net.core.netdev_max_backlog = <span class="number">262144</span></div><div class="line"></div><div class="line">每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包</div><div class="line">的最大数目。</div><div class="line"></div><div class="line">net.ipv4.tcp_max_orphans = <span class="number">262144</span></div><div class="line"></div><div class="line">系统中最多有多少个<span class="constant">TCP</span> 套接字不被关联到任何一个用户文件句柄上。如果超过这个数</div><div class="line">字，孤儿连接将即刻被复位并打印出警告信息。这个限制仅仅是为了防止简单的 <span class="constant">DoS</span> 攻击，</div><div class="line">不能过分依靠它或者人为地减小这个值，更应该增加这个值(如果增加了内存之后)。</div><div class="line"></div><div class="line">net.ipv4.tcp_max_syn_backlog = <span class="number">262144</span></div><div class="line"></div><div class="line">记录的那些尚未收到客户端确认信息的连接请求的最大值。对于有 <span class="number">128</span>M 内存的系统而</div><div class="line">言，缺省值是 <span class="number">1024</span>，小内存的系统则是 <span class="number">128</span>。</div><div class="line"></div><div class="line">net.ipv4.tcp_timestamps = <span class="number">0</span></div><div class="line"></div><div class="line">时间戳可以避免序列号的卷绕。一个 <span class="number">1</span>Gbps 的链路肯定会遇到以前用过的序列号。时间</div><div class="line">戳能够让内核接受这种 “异常”的数据包。这里需要将其关掉。</div><div class="line"></div><div class="line">net.ipv4.tcp_synack_retries = <span class="number">1</span></div><div class="line"></div><div class="line">为了打开对端的连接，内核需要发送一个<span class="constant">SYN</span> 并附带一个回应前面一个<span class="constant">SYN</span> 的<span class="constant">ACK</span>。也</div><div class="line">就是所谓三次握手中的第二次握手。这个设置决定了内核放弃连接之前发送 <span class="constant">SYN</span>+<span class="constant">ACK</span> 包的</div><div class="line">数量。</div><div class="line"></div><div class="line">net.ipv4.tcp_syn_retries = <span class="number">1</span></div><div class="line"></div><div class="line">在内核放弃建立连接之前发送<span class="constant">SYN</span> 包的数量。</div><div class="line"></div><div class="line">net.ipv4.tcp_fin_timeout = <span class="number">1</span></div><div class="line"></div><div class="line">如果套接字由本端要求关闭，这个参数决定了它保持在 <span class="constant">FIN</span>-<span class="constant">WAIT</span>-<span class="number">2</span> 状态的时间。对端</div><div class="line">可以出错并永远不关闭连接，甚至意外当机。缺省值是 <span class="number">60</span> 秒。<span class="number">2.2</span> 内核的通常值是<span class="number">180</span> 秒，</div></pre></td></tr></table></figure>

<h4 id="针对nginx完整的内核优化">针对nginx完整的内核优化</h4>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">你可以按这个设置，但要记住的是，即使你的机器是一个轻载的 <span class="constant">WEB</span> 服务器，也有因为大</div><div class="line">量的死套接字而内存溢出的风险，<span class="constant">FIN</span>- <span class="constant">WAIT</span>-<span class="number">2</span> 的危险性比<span class="constant">FIN</span>-<span class="constant">WAIT</span>-<span class="number">1</span> 要小，因为它最多只</div><div class="line">能吃掉 <span class="number">1.5</span>K 内存，但是它们的生存期长些。</div><div class="line"></div><div class="line">net.ipv4.tcp_keepalive_time = <span class="number">30</span></div><div class="line"></div><div class="line">当keepalive 起用的时候，<span class="constant">TCP</span> 发送 keepalive 消息的频度。缺省是 <span class="number">2</span> 小时。</div><div class="line"></div><div class="line">下面贴一个完整的内核优化设置：</div><div class="line"></div><div class="line">net.ipv4.ip_forward = <span class="number">0</span></div><div class="line">net.ipv4.conf.default.rp_filter = <span class="number">1</span></div><div class="line">net.ipv4.conf.default.accept_source_route = <span class="number">0</span></div><div class="line">kernel.sysrq = <span class="number">0</span></div><div class="line">kernel.core_uses_pid = <span class="number">1</span></div><div class="line">net.ipv4.tcp_syncookies = <span class="number">1</span></div><div class="line">kernel.msgmnb = <span class="number">65536</span></div><div class="line">kernel.msgmax = <span class="number">65536</span></div><div class="line">kernel.shmmax = <span class="number">68719476736</span></div><div class="line">kernel.shmall = <span class="number">4294967296</span></div><div class="line">net.ipv4.tcp_max_tw_buckets = <span class="number">6000</span></div><div class="line">net.ipv4.tcp_sack = <span class="number">1</span></div><div class="line">net.ipv4.tcp_window_scaling = <span class="number">1</span></div><div class="line">net.ipv4.tcp_rmem = <span class="number">4096</span> <span class="number">87380</span> <span class="number">4194304</span></div><div class="line">net.ipv4.tcp_wmem = <span class="number">4096</span> <span class="number">16384</span> <span class="number">4194304</span></div><div class="line">net.core.wmem_default = <span class="number">8388608</span></div><div class="line">net.core.rmem_default = <span class="number">8388608</span></div><div class="line">net.core.rmem_max = <span class="number">16777216</span></div><div class="line">net.core.wmem_max = <span class="number">16777216</span></div><div class="line">net.core.netdev_max_backlog = <span class="number">262144</span></div><div class="line">net.core.somaxconn = <span class="number">262144</span></div><div class="line">net.ipv4.tcp_max_orphans = <span class="number">3276800</span></div><div class="line">net.ipv4.tcp_max_syn_backlog = <span class="number">262144</span></div><div class="line">net.ipv4.tcp_timestamps = <span class="number">0</span></div><div class="line">net.ipv4.tcp_synack_retries = <span class="number">1</span></div><div class="line">net.ipv4.tcp_syn_retries = <span class="number">1</span></div><div class="line">net.ipv4.tcp_tw_recycle = <span class="number">1</span></div><div class="line">net.ipv4.tcp_tw_reuse = <span class="number">1</span></div><div class="line">net.ipv4.tcp_mem = <span class="number">94500000</span> <span class="number">915000000</span> <span class="number">927000000</span></div><div class="line">net.ipv4.tcp_fin_timeout = <span class="number">1</span></div><div class="line">net.ipv4.tcp_keepalive_time = <span class="number">30</span></div><div class="line">net.ipv4.ip_local_port_range = <span class="number">1024</span> <span class="number">65000</span></div></pre></td></tr></table></figure>

<h4 id="简单的nginx配置文件">简单的nginx配置文件</h4>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">user www www;</div><div class="line">worker_processes <span class="number">8</span>;</div><div class="line">worker_cpu_affinity <span class="number">00000001</span> <span class="number">00000010</span> <span class="number">00000100</span> <span class="number">00001000</span> <span class="number">00010000</span> <span class="number">00100000</span></div><div class="line"><span class="number">01000000</span>;</div><div class="line">error_log /www/log/nginx_error.log crit;</div><div class="line">pid /usr/local/nginx/nginx.pid;</div><div class="line">worker_rlimit_nofile <span class="number">204800</span>;</div><div class="line"></div><div class="line">events</div><div class="line">{</div><div class="line">use epoll;</div><div class="line">worker_connections <span class="number">204800</span>;</div><div class="line">}</div><div class="line"></div><div class="line">http</div><div class="line">{</div><div class="line"><span class="keyword">include</span> mime.types;</div><div class="line">default_type application/octet-stream;</div><div class="line"></div><div class="line">charset utf-<span class="number">8</span>;</div><div class="line"></div><div class="line">server_names_hash_bucket_size <span class="number">128</span>;</div><div class="line">client_header_buffer_size <span class="number">2</span>k;</div><div class="line">large_client_header_buffers <span class="number">4</span> <span class="number">4</span>k;</div><div class="line">client_max_body_size <span class="number">8</span>m;</div><div class="line"></div><div class="line">sendfile on;</div><div class="line">tcp_nopush on;</div><div class="line"></div><div class="line">keepalive_timeout <span class="number">60</span>;</div><div class="line"></div><div class="line">fastcgi_cache_path /usr/local/nginx/fastcgi_cache levels=<span class="number">1</span><span class="symbol">:</span><span class="number">2</span> keys_zone=<span class="constant">TEST</span><span class="symbol">:</span><span class="number">10</span>m inactive=<span class="number">5</span>m;</div><div class="line">fastcgi_connect_timeout <span class="number">300</span>;</div><div class="line">fastcgi_send_timeout <span class="number">300</span>;</div><div class="line">fastcgi_read_timeout <span class="number">300</span>;</div><div class="line">fastcgi_buffer_size <span class="number">4</span>k;</div><div class="line">fastcgi_buffers <span class="number">8</span> <span class="number">4</span>k;</div><div class="line">fastcgi_busy_buffers_size <span class="number">8</span>k;</div><div class="line">fastcgi_temp_file_write_size <span class="number">8</span>k;</div><div class="line"></div><div class="line">fastcgi_cache <span class="constant">TEST</span>;</div><div class="line">fastcgi_cache_valid <span class="number">200</span> <span class="number">302</span> <span class="number">1</span>h;</div><div class="line">fastcgi_cache_valid <span class="number">301</span> <span class="number">1</span>d;</div><div class="line">fastcgi_cache_valid any <span class="number">1</span>m;</div><div class="line">fastcgi_cache_min_uses <span class="number">1</span>;</div><div class="line">fastcgi_cache_use_stale error timeout invalid_header http_50<span class="number">0</span>;</div><div class="line"></div><div class="line">open_file_cache max=<span class="number">204800</span> inactive=<span class="number">20</span>s;</div><div class="line">open_file_cache_min_uses <span class="number">1</span>;</div><div class="line">open_file_cache_valid <span class="number">30</span>s;</div><div class="line"></div><div class="line">tcp_nodelay on;</div><div class="line"></div><div class="line">gzip on;</div><div class="line">gzip_min_length <span class="number">1</span>k;</div><div class="line">gzip_buffers <span class="number">4</span> <span class="number">16</span>k;</div><div class="line">gzip_http_version <span class="number">1.0</span>;</div><div class="line">gzip_comp_level <span class="number">2</span>;</div><div class="line">gzip_types text/plain application/x-javascript text/css application/xml;</div><div class="line">gzip_vary on;</div><div class="line"></div><div class="line">server</div><div class="line">{</div><div class="line">listen <span class="number">8080</span>;</div><div class="line">server_name backup.aiju.com;</div><div class="line">index index.php index.htm;</div><div class="line">root /www/html/;</div><div class="line"></div><div class="line">location /status</div><div class="line">{</div><div class="line">stub_status on;</div><div class="line">}</div><div class="line"></div><div class="line">location ~ .*.(php|php5)?<span class="variable">$</span></div><div class="line">{</div><div class="line">fastcgi_pass <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span><span class="symbol">:</span><span class="number">9000</span>;</div><div class="line">fastcgi_index index.php;</div><div class="line"><span class="keyword">include</span> fcgi.conf;</div><div class="line">}</div><div class="line"></div><div class="line">location ~ .*.(gif|jpg|jpeg|png|bmp|swf|js|css)<span class="variable">$</span></div><div class="line"></div><div class="line">{</div><div class="line">expires <span class="number">30</span>d;</div><div class="line">}</div><div class="line"></div><div class="line">log_format access ‘<span class="variable">$remote_addr</span> – <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] “<span class="variable">$request</span>” ‘</div><div class="line">‘<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> “<span class="variable">$http_referer</span>” ‘</div><div class="line">‘”<span class="variable">$http_user_agent</span>” <span class="variable">$http_x_forwarded_for</span>’;</div><div class="line">access_log /www/log/access.log access;</div><div class="line">}</div><div class="line">}</div></pre></td></tr></table></figure>

<h4 id="FastCGi介绍">FastCGi介绍</h4>
<p>关于FastCGI 的几个指令：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line">fastcgi_cache_path /usr/local/nginx/fastcgi_cache levels=<span class="number">1</span><span class="symbol">:</span><span class="number">2</span> keys_zone=<span class="constant">TEST</span><span class="symbol">:</span><span class="number">10</span>m</div><div class="line">inactive=<span class="number">5</span>m;</div><div class="line"></div><div class="line">这个指令为 <span class="constant">FastCGI</span> 缓存指定一个路径，目录结构等级，关键字区域存储时间和非活动</div><div class="line">删除时间。</div><div class="line"></div><div class="line">fastcgi_connect_timeout <span class="number">300</span>;</div><div class="line"></div><div class="line">指定连接到后端 <span class="constant">FastCGI</span> 的超时时间。</div><div class="line"></div><div class="line">fastcgi_send_timeout <span class="number">300</span>;</div><div class="line"></div><div class="line">向<span class="constant">FastCGI</span> 传送请求的超时时间，这个值是指已经完成两次握手后向<span class="constant">FastCGI</span> 传送请求的</div><div class="line">超时时间。</div><div class="line"></div><div class="line">fastcgi_read_timeout <span class="number">300</span>;</div><div class="line"></div><div class="line">接收 <span class="constant">FastCGI</span> 应答的超时时间，这个值是指已经完成两次握手后接收 <span class="constant">FastCGI</span> 应答的超时</div><div class="line">时间。</div><div class="line"></div><div class="line">fastcgi_buffer_size <span class="number">4</span>k;</div><div class="line"></div><div class="line">指定读取 <span class="constant">FastCGI</span> 应答第一部分需要用多大的缓冲区，一般第一部分应答不会超过 <span class="number">1</span>k，</div><div class="line">由于页面大小为<span class="number">4</span>k，所以这里设置为<span class="number">4</span>k。</div><div class="line"></div><div class="line">fastcgi_buffers <span class="number">8</span> <span class="number">4</span>k;</div><div class="line"></div><div class="line">指定本地需要用多少和多大的缓冲区来缓冲 <span class="constant">FastCGI</span> 的应答。</div><div class="line"></div><div class="line">fastcgi_busy_buffers_size <span class="number">8</span>k;</div><div class="line"></div><div class="line">这个指令我也不知道是做什么用，只知道默认值是fastcgi_buffers 的两倍。</div><div class="line"></div><div class="line">fastcgi_temp_file_write_size <span class="number">8</span>k;</div><div class="line"></div><div class="line">在写入fastcgi_temp_path 时将用多大的数据块，默认值是fastcgi_buffers 的两倍。</div><div class="line"></div><div class="line">fastcgi_cache <span class="constant">TEST</span></div><div class="line"></div><div class="line">开启 <span class="constant">FastCGI</span> 缓存并且为其制定一个名称。个人感觉开启缓存非常有用，可以有效降低</div><div class="line"><span class="constant">CPU</span> 负载，并且防止<span class="number">502</span> 错误。</div><div class="line"></div><div class="line">fastcgi_cache_valid <span class="number">200</span> <span class="number">302</span> <span class="number">1</span>h;</div><div class="line">fastcgi_cache_valid <span class="number">301</span> <span class="number">1</span>d;</div><div class="line">fastcgi_cache_valid any <span class="number">1</span>m;</div><div class="line"></div><div class="line">为指定的应答代码指定缓存时间，如上例中将 <span class="number">200</span>，<span class="number">302</span> 应答缓存一小时，<span class="number">301</span> 应答缓</div><div class="line">存 <span class="number">1</span> 天，其他为 <span class="number">1</span> 分钟。</div><div class="line"></div><div class="line">fastcgi_cache_min_uses <span class="number">1</span>;</div><div class="line"></div><div class="line">缓存在fastcgi_cache_path 指令 inactive 参数值时间内的最少使用次数，如上例，如果在</div><div class="line"><span class="number">5</span> 分钟内某文件 <span class="number">1</span> 次也没有被使用，那么这个文件将被移除。</div><div class="line"></div><div class="line">fastcgi_cache_use_stale error timeout invalid_header http_50<span class="number">0</span>;</div><div class="line"></div><div class="line">不知道这个参数的作用，猜想应该是让 nginx 知道哪些类型的缓存是没用的。</div><div class="line">以上为nginx 中<span class="constant">FastCGI</span> 相关参数，另外，<span class="constant">FastCGI</span> 自身也有一些配置需要进行优化，如</div><div class="line">果你使用 php-fpm 来管理 <span class="constant">FastCGI</span>，可以修改配置文件中的以下值：</div><div class="line"></div><div class="line"><span class="number">60</span></div><div class="line"></div><div class="line">同时处理的并发请求数，即它将开启最多<span class="number">60</span> 个子线程来处理并发连接。</div><div class="line"></div><div class="line"><span class="number">102400</span></div><div class="line"></div><div class="line">最多打开文件数。</div><div class="line"></div><div class="line"><span class="number">204800</span></div><div class="line"></div><div class="line">每个进程在重置之前能够执行的最多请求数。</div><div class="line"></div><div class="line">下面贴几张测试结果图。</div><div class="line"></div><div class="line">静态页面为我在 squid 配置<span class="number">4</span>W 并发那篇文章中提到的测试文件，下图为同时在<span class="number">6</span> 台机</div><div class="line"></div><div class="line">器运行webbench -c <span class="number">30000</span> -t <span class="number">600</span> <span class="symbol">http:</span>/<span class="regexp">/backup.aiju.com:8080/index</span>.html 命令后</div><div class="line">的测试结果：</div><div class="line"></div><div class="line">使用 netstat 过滤后的连接数：</div><div class="line"></div><div class="line">php 页面在status 中的结果 （php 页面为调用 phpinfo）：</div><div class="line"></div><div class="line">php 页面在 netstat 过滤后的连接数：</div><div class="line"></div><div class="line">未使用 <span class="constant">FastCGI</span> 缓存之前的服务器负载：</div><div class="line"></div><div class="line">此时打开 php 页面已经有些困难，需要进行多次刷新才能打开。上图中 cpu<span class="number">0</span> 负载偏低</div><div class="line">是因为测试时将网卡中断请求全部分配到 cpu<span class="number">0</span> 上，并且在 nginx 中开启<span class="number">7</span> 个进程分别制定</div><div class="line">到cpu1-<span class="number">7</span>。</div><div class="line">使用 <span class="constant">FastCGI</span> 缓存之后：</div><div class="line"></div><div class="line">此时可以很轻松的打开 php 页面。</div><div class="line">这个测试并没有连接到任何数据库，所以并没有什么参考价值，不过不知道上述测试是</div><div class="line">否已经到达极限，根据内存和 cpu 的使用情况来看似乎没有，但是已经没有多余的机子来让</div><div class="line">我运行webbench 了。囧</div></pre></td></tr></table></figure>

<p>参考资料：</p>
<p><a href="http://blog.chinaunix.net/u3/105004/showart_2087155.html" target="_blank" rel="external">http://blog.chinaunix.net/u3/105004/showart_2087155.html</a></p>
<p><a href="http://nginx.179401.cn/" target="_blank" rel="external">http://nginx.179401.cn/</a></p>
<p><a href="http://blog.s135.com/nginx_php_v5/" target="_blank" rel="external">http://blog.s135.com/nginx_php_v5/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一般来说nginx 配置文件中对优化比较有作用的为以下几项：</p>
<h3 id="配置文件优化">配置文件优化</h3>
]]>
    
    </summary>
    
      <category term="Nginx" scheme="http://cloudbps.com/categories/Nginx/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CDN介绍(来自又拍云存储)]]></title>
    <link href="http://cloudbps.com/2015/01/10/cdn/"/>
    <id>http://cloudbps.com/2015/01/10/cdn/</id>
    <published>2015-01-10T04:19:00.000Z</published>
    <updated>2015-01-10T17:21:59.000Z</updated>
    <content type="html"><![CDATA[<h3 id="CDN作用">CDN作用</h3>
<ul>
<li><p>缓存代理<br>缓存代理类似内容提供商源数据中心的一个透明镜像，这些内容可以在边缘服务器中缓存和分发，对于普通的网络用户来讲，它通过智能DNS的筛选，用户的请求被透明地指向离他最近的省内骨干节点，最大限度的缩短用户信息的传输距离。在任何时间、地点或者不同的运营商之间（尤其在中国），快速响应用户请求。</p>
<p>它是通过在网络各处放置节点服务器，所以无需更改源站的网络拓扑，而是根据智能路由和用户就近原则匹配，从而确保了内容快又稳定的传输，大大提高了用户访问网站的响应速度。</p>
<a id="more"></a></li>
<li><p>路由加速<br>CDN服务初衷是确保快速可靠地分发静态内容，相对于动态内容来说，由于动态内容必须长连接来操持连接和通讯，只是用户到服务商之间的链路和质量都无法控制。因此为了提供快速的网络体验，有必要事先设置一些最佳路由。如省内骨干网，双线机房，以改善用户的网络体验。在中国典型的互联互通问题上，网络游戏加速就是一些最佳实践。</p>
</li>
<li><p>安全防护<br>利用好了CDN网络，无论面对是渗透还是DDoS攻击，攻击的目标大都会被指向到了CDN，进而保护了用户源站。因为CDN是分布式的，所以即使遭受DDoS攻击，也具备分散性，大大减少了源站收到毁灭打击的可能性。在架构的前期，还可以通过CDN做一些前置的安全保护工作，如拦截SQL注入、XSS跨站、网站挂马、篡改等黑客攻击。</p>
</li>
<li><p>节省成本<br>CDN节点机房只需要在当地运营商的单线机房，或者带宽相对便宜的城市，采购成本低。由于通过CDN减轻了源站压力，节点越多，源站面对任何时间高峰时的带宽峰值会被平均拉低。从而降低了后端服务器硬件规模和带宽的采购成本。 由于源站服务器规模的减少，后期运维成本也大大减少，可谓是一举多得。</p>
</li>
</ul>
<p>由此可见，为了能够满足全国乃至世界各地和多线路运营商的不同用户都有最好的体验，构建CDN的分布式服务其重要性不言而喻。但是，在面对如何根据自身场景去设计一个CDN架构，或者如何选择以一个适合自己CDN服务提供商，这里面也有许多问题需要考量。</p>
<h3 id="CDN架构">CDN架构</h3>
<ul>
<li><p>存储介质 vs IO的关系<br>这里先简单的介绍一下SSD介质的一些考量。SSD作为采用电子存储介质进行数据存储和读取的一种技术，突破了传统机械硬盘的性能瓶颈，固态硬盘的全集成电路化、无任何机械运动部件的革命性设计，拥有极高的读取性能。</p>
<p>此环节，基本上不需要与传统的SATA、SAS作性能上的比较，SSD的胜出毫无悬念。而在整体方案中，只需要考虑承受的价格、容量大小（如120GB，160GB，300GB等规格）、是否能够满足设计需求这些问题。</p>
</li>
</ul>
<p><strong><em>作者建议：如果允许， 能使用SSD，就一定要考虑采用，用空间换性能，提升非常明显。</em></strong></p>
<ul>
<li><p>这里给几个SSD实战的小贴士： </p>
<p>选择EXT4文件系统+TRIM模式（mount -o defaults,noatime,nodiratime,barrier=0,discard），Btrfs建议少冒险<br>如果是使用三星的固态硬盘，可以尝试它贡献给开源的针对固态硬盘优化的F2FS文件系统，相当不错的选择<br>I/O Schedulers调度算法，可以使用CFQ或者Deadline算法<br>内核参数调整，SSD所在硬盘，echo 0 &gt; /sys/block/sda/queue/rotational<br>随机读写 vs 顺序读写<br>机械硬盘的连续读写性很好，但随机读写性能很差。这是因为磁头移动至正确的磁道上需要时间，随机读写时，也就需要磁头和探针频繁的转动，而机械结构的磁头和探针的位置调整是十分费时的，这就严重影响到硬盘的寻址速度，进而影响到随机写入速度。</p>
<p>在存储小文件（图片）、OLTP数据库应用时，随机读写性能（IOPS）是最重要指标。由于固态硬盘没有普通硬盘的机械结构，也不存在机械硬盘的寻道问题，因此系统能够在低于1ms的时间内对任意位置存储单元完成输入/输出操作。</p>
</li>
<li><p>作者经验笔记：</p>
<ul>
<li>BIOS里务必开启AHCI模式（能支持SATA热插拔和NCQ寻址方式，提速→300%，当然内核也要支持AHCI模式）</li>
<li>SSD的主控芯片相当于大脑中枢，非常重要，建议用Intel、Samsung、Marvell等知名品牌</li>
<li>SSD更适合应用在随机读写场景，因此需要认真思考什么场合应用</li>
</ul>
</li>
<li><p>大文件 vs 小文件<br>大多数的存储系统都是针对大文件而设计的，对小文件而言，大文件的存储系统无法适应小文件的存储需求，它造成元数据管理、数据布局和I/O管理、Cache管理、网络开销等方面性能和存储效率降低。</p>
<p>而且，文件系统的inode是线性存储的，因此，我们遍历一个目录下的文件，需要读取的磁盘的位置是来回跳跃的。不连续的读取意味着磁盘要不断的进行寻道，那么性能自然可想而知。</p>
</li>
<li><p>作者经验笔记： </p>
<ul>
<li>无论大小文件，首选EXT4文件系统，Reiserfs/Btrfs不要轻易尝试（虽然B-tree设计先进）</li>
<li>EXT4针对小文件有所改进，使用了inode预分配，这使得inode具有很好的局部性特征，同一目录文件inode尽量放在一起，加速了目录寻址与操作性能。</li>
<li>EXT4针对大文件使用了extent/delay/multi的数据块分配策略。这些策略使得大文件的数据块保持连续存储在磁盘上，数据寻址次数大大减少，显著提高I/O吞吐量。</li>
<li>XFS在大文件方面，表现得不错，可以使用。<ul>
<li>SSD尽量应用在随机小文件读写的应用场景，毕竟容量宝贵，在有限的空间保存更多的文件是个明智之选。</li>
<li>有开发实力的可以选用基于LevelDB或其它的KV存储作底层文件系统，此为后话。</li>
</ul>
</li>
</ul>
</li>
<li><p>硬件红利 vs 软件设计<br>随着时间的推移，硬件升级已经突破了摩尔定律，在硬件不断升级带来的红利下，我们从最初的双核到四核、六核、八核心&amp;超线程，从2G、4G内存到 8G、16G甚至128G内存的情况下，同样的价格所带来的硬件升级，性能提升也是非常可观的，因此，设置合适的硬件淘汰时间点也很重要，当老旧服务器超过3～5年的服役期，务必考虑做新陈代谢式的升级，充分利用好硬件潜力，保证架构设计平滑有序稳定的升级。</p>
<p>反观软件设计，相对硬件升级，可谈的话题就比较多了，举个反例：比如说 Squid软件的缺点（当然，诞生于1996年的Squid与Apache同样的古老，昔日的时代也是立下了汗马功劳，但时代进步就不能固步自封必须考虑革新）：</p>
<p>无法利用多核优势，造成单核CPU压力太高；<br>鸡肋的DNS进程必须要运行；<br>无法利用大内存做缓存加速；<br>COSS设计上的先天缺陷，初始化甚至重启后重建索引慢；<br>偶然机器重启，修复的效率非常漫长，慢到让人崩溃；<br>更多详情参考： </p>
</li>
<li><p>Varnish Cache 的架构笔记，为什么一些古老的软件正在被新的设计思想所淘汰，如Nginx替代Apache，ATS替代Squid，Postfix替代Sendmail等等。</p>
</li>
<li><p>建议：</p>
<ul>
<li>负载均衡技术应用得当，如haproxy、lvs。一方面可以互援互备，另一方面也可以方便轮流升级；</li>
<li>要尝试新的软件开发思路和网络模型，如epoll、aio、内存加速，连接复用和事件驱动机制；</li>
</ul>
</li>
<li><p>系统优化</p>
<ul>
<li>系统服务精简瘦身；</li>
<li>文件系统性能调优；</li>
<li>提高磁盘IO性能；</li>
<li>优化网络性能；</li>
<li>优化路由策略；</li>
<li>数据库的优化；<br>……这里就不展开详述了，以后有机会再介绍。</li>
</ul>
</li>
<li><p>CDN开源</p>
<ul>
<li>开源世界里能够担当反向代理及缓存的软件不少，而且各有优劣。在这里，我就不一一介绍每个软件的介绍了，大家可以自行参考相关链接了解。</li>
</ul>
</li>
<li><p>CDN架构上要充分体现出抗攻击能力和灵活应变的原则。因此，我们将CDN节点分解成反向代理+缓存加速+攻击防御这三个不同层次的功能结构。</p>
</li>
<li><p>反向代理功能（作用：路由加速，隐藏主节点，负载均衡）</p>
</li>
<li>缓存加速功能（作用：静态推送，节省后端主节点带宽）</li>
<li>攻击防御功能（作用：快速解析，匹配过滤恶意攻击）</li>
<li>作为一个架构师，就必须要考虑如何选型，我们从性能、功能、配置上来进行比较筛选。</li>
</ul>
<table>
<thead>
<tr>
<th>软件名称</th>
<th>性能</th>
<th>功能</th>
<th>过滤规则配置</th>
</tr>
</thead>
<tbody>
<tr>
<td>squid</td>
<td>不能多核是硬伤；磁盘缓存容量有优势；性能中等</td>
<td>多；支持ACL角色控制；支持ICP缓存协议</td>
<td>支持外部文件读取及热加载；支持热启动</td>
</tr>
<tr>
<td>Varnish</td>
<td>多核支持；内存缓存；性能强</td>
<td>够用；支持集群，但不支持ICP集群；支持后端存活检查</td>
<td>不支持外部文件读取；需要转义；支持热启动</td>
</tr>
<tr>
<td>Nginx</td>
<td>多核支持；支持代理插件；性能较强</td>
<td>多；支持集群，但不支持ICP集群；支持后端存活检查；通过插件可以充当多角色服务器</td>
<td>不支持外部文件读取；需要转义；支持热启动</td>
</tr>
<tr>
<td>Apache TS</td>
<td>多核支持；磁盘/内存缓存；性能强</td>
<td>够用；支持后端存活检查；支持ICP协议，Cluster不稳定；支持插件开发；</td>
<td>支持外部规则文件读取及热加载；支持热启动</td>
</tr>
<tr>
<td>HAProxy</td>
<td>多核支持；多核支持；支持HTTP头部解析；性能强</td>
<td>少，只专注HTTP头部解析和转发功能；支持ACL角色控制；支持后端存活检查</td>
<td>支持外部规则文件读取及热加载；支持热启动；支持会话粘滞和长连接</td>
</tr>
</tbody>
</table>
<p>现在，我们对这三层功能结构充分了解，在测试调优及生产线的实践检验中，我们发现：</p>
<ul>
<li>HTTP防御性能：HAProxy在应对大流量CC攻击时，做正则匹配及头部过滤时，CPU消耗只占10%~20%。其它软件均狂占CPU资源约90%以上，容易成瓶颈导致整个系统无响应。</li>
<li>反向代理性能：单纯转发效率以内存缓存型的Varnish性能最强，ATS和Nginx次之，考虑大容量缓存因素，ATS也是个不错的选择。Nginx是专门针对C10K的产物，性能不错，配合自己编写插件，业务可塑性很强。</li>
<li>过滤规则的可配置性：HAProxy，ATS，Squid均支持规则文件读取、ACL定制和热加载、热启动。Nginx则不支持外部文件正则匹配，略差一点，但可塑性强。</li>
</ul>
<h3 id="负载均衡——高可用性:LVS">负载均衡——高可用性:LVS</h3>
<p>LVS是个重量级、高效稳定的四层转发，虽然不能作七层HTTP协议的识别，但完全可以架设在七层之前，与上述的各种软件搭配使用。</p>
<p>所以，LVS的使用并不会影响网络结构，后续仍然可以想上就上，前提是要兼顾到LVS的单点故障，这个我们可以通过Keepalived/Heartbeat来实现可用性和可靠性的保证。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="CDN作用">CDN作用</h3>
<ul>
<li><p>缓存代理<br>缓存代理类似内容提供商源数据中心的一个透明镜像，这些内容可以在边缘服务器中缓存和分发，对于普通的网络用户来讲，它通过智能DNS的筛选，用户的请求被透明地指向离他最近的省内骨干节点，最大限度的缩短用户信息的传输距离。在任何时间、地点或者不同的运营商之间（尤其在中国），快速响应用户请求。</p>
<p>它是通过在网络各处放置节点服务器，所以无需更改源站的网络拓扑，而是根据智能路由和用户就近原则匹配，从而确保了内容快又稳定的传输，大大提高了用户访问网站的响应速度。</p>
]]>
    
    </summary>
    
      <category term="缓存加速" scheme="http://cloudbps.com/tags/%E7%BC%93%E5%AD%98%E5%8A%A0%E9%80%9F/"/>
    
      <category term="CDN" scheme="http://cloudbps.com/categories/CDN/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[性能调优攻略(转自爱开源)]]></title>
    <link href="http://cloudbps.com/2015/01/10/tun/"/>
    <id>http://cloudbps.com/2015/01/10/tun/</id>
    <published>2015-01-10T04:19:00.000Z</published>
    <updated>2015-01-10T07:36:02.000Z</updated>
    <content type="html"><![CDATA[<p>一、系统性能定义</p>
<p>让我们先来说说如何什么是系统性能。这个定义非常关键，如果我们不清楚什么是系统性能，那么我们将无法定位之。我见过很多朋友会觉得这很容易，但是仔细一问，其实他们并没有一个比较系统的方法，所以，在这里我想告诉大家如何系统地来定位性能。 总体来说，系统性能就是两个事：</p>
<p>Throughput ，吞吐量。也就是每秒钟可以处理的请求数，任务数。<br>Latency， 系统延迟。也就是系统在处理一个请求或一个任务时的延迟。<br>一般来说，一个系统的性能受到这两个条件的约束，缺一不可。比如，我的系统可以顶得住一百万的并发，但是系统的延迟是2分钟以上，那么，这个一百万的负载毫无意义。系统延迟很短，但是吞吐量很低，同样没有意义。所以，一个好的系统的性能测试必然受到这两个条件的同时作用。 有经验的朋友一定知道，这两个东西的一些关系：</p>
<p>Throughput越大，Latency会越差。因为请求量过大，系统太繁忙，所以响应速度自然会低。<br>Latency越好，能支持的Throughput就会越高。因为Latency短说明处理速度快，于是就可以处理更多的请求。<br><a id="more"></a><br>二、系统性能测试</p>
<p>经过上述的说明，我们知道要测试系统的性能，需要我们收集系统的Throughput和Latency这两个值。</p>
<p>首先，需要定义Latency这个值，比如说，对于网站系统响应时间必需是5秒以内（对于某些实时系统可能需要定义的更短，比如5ms以内，这个更根据不同的业务来定义）<br>其次，开发性能测试工具，一个工具用来制造高强度的Throughput，另一个工具用来测量Latency。对于第一个工具，你可以参考一下“十个免费的Web压力测试工具”，关于如何测量Latency，你可以在代码中测量，但是这样会影响程序的执行，而且只能测试到程序内部的Latency，真正的Latency是整个系统都算上，包括操作系统和网络的延时，你可以使用Wireshark来抓网络包来测量。这两个工具具体怎么做，这个还请大家自己思考去了。<br>最后，开始性能测试。你需要不断地提升测试的Throughput，然后观察系统的负载情况，如果系统顶得住，那就观察Latency的值。这样，你就可以找到系统的最大负载，并且你可以知道系统的响应延时是多少。<br>再多说一些，</p>
<p>关于Latency，如果吞吐量很少，这个值估计会非常稳定，当吞吐量越来越大时，系统的Latency会出现非常剧烈的抖动，所以，我们在测量Latency的时候，我们需要注意到Latency的分布，也就是说，有百分之几的在我们允许的范围，有百分之几的超出了，有百分之几的完全不可接受。也许，平均下来的Latency达标了，但是其中仅有50%的达到了我们可接受的范围。那也没有意义。<br>关于性能测试，我们还需要定义一个时间段。比如：在某个吞吐量上持续15分钟。因为当负载到达的时候，系统会变得不稳定，当过了一两分钟后，系统才会稳定。另外，也有可能是，你的系统在这个负载下前几分钟还表现正常，然后就不稳定了，甚至垮了。所以，需要这么一段时间。这个值，我们叫做峰值极限。<br>性能测试还需要做Soak Test，也就是在某个吞吐量下，系统可以持续跑一周甚至更长。这个值，我们叫做系统的正常运行的负载极限。<br>性能测试有很多很复要的东西，比如：burst test等。 这里不能一一详述，这里只说了一些和性能调优相关的东西。总之，性能测试是一细活和累活。</p>
<p>三、定位性能瓶颈</p>
<p>有了上面的铺垫，我们就可以测试到到系统的性能了，再调优之前，我们先来说说如何找到性能的瓶颈。我见过很多朋友会觉得这很容易，但是仔细一问，其实他们并没有一个比较系统的方法。</p>
<p>3.1）查看操作系统负载</p>
<p>首先，当我们系统有问题的时候，我们不要急于去调查我们代码，这个毫无意义。我们首要需要看的是操作系统的报告。看看操作系统的CPU利用率，看看内存使用率，看看操作系统的IO，还有网络的IO，网络链接数，等等。Windows下的perfmon是一个很不错的工具，Linux下也有很多相关的命令和工具，比如：SystemTap，LatencyTOP，vmstat, sar, iostat, top, tcpdump等等 。通过观察这些数据，我们就可以知道我们的软件的性能基本上出在哪里。比如：</p>
<p>1）先看CPU利用率，如果CPU利用率不高，但是系统的Throughput和Latency上不去了，这说明我们的程序并没有忙于计算，而是忙于别的一些事，比如IO。（另外，CPU的利用率还要看内核态的和用户态的，内核态的一上去了，整个系统的性能就下来了。而对于多核CPU来说，CPU 0 是相当关键的，如果CPU 0的负载高，那么会影响其它核的性能，因为CPU各核间是需要有调度的，这靠CPU0完成）</p>
<p>2）然后，我们可以看一下IO大不大，IO和CPU一般是反着来的，CPU利用率高则IO不大，IO大则CPU就小。关于IO，我们要看三个事，一个是磁盘文件IO，一个是驱动程序的IO（如：网卡），一个是内存换页率。这三个事都会影响系统性能。</p>
<p>3）然后，查看一下网络带宽使用情况，在Linux下，你可以使用iftop, iptraf, ntop, tcpdump这些命令来查看。或是用Wireshark来查看。</p>
<p>4）如果CPU不高，IO不高，内存使用不高，网络带宽使用不高。但是系统的性能上不去。这说明你的程序有问题，比如，你的程序被阻塞了。可能是因为等那个锁，可能是因为等某个资源，或者是在切换上下文。</p>
<p>通过了解操作系统的性能，我们才知道性能的问题，比如：带宽不够，内存不够，TCP缓冲区不够，等等，很多时候，不需要调整程序的，只需要调整一下硬件或操作系统的配置就可以了。</p>
<p>3.2）使用Profiler测试</p>
<p>接下来，我们需要使用性能检测工具，也就是使用某个Profiler来差看一下我们程序的运行性能。如：Java的JProfiler/TPTP/CodePro Profiler，GNU的gprof，IBM的PurifyPlus，Intel的VTune，AMD的CodeAnalyst，还有Linux下的OProfile/perf，后面两个可以让你对你的代码优化到CPU的微指令级别，如果你关心CPU的L1/L2的缓存调优，那么你需要考虑一下使用VTune。 使用这些Profiler工具，可以让你程序中各个模块函数甚至指令的很多东西，如：运行的时间 ，调用的次数，CPU的利用率，等等。这些东西对我们来说非常有用。</p>
<p>我们重点观察运行时间最多，调用次数最多的那些函数和指令。这里注意一下，对于调用次数多但是时间很短的函数，你可能只需要轻微优化一下，你的性能就上去了（比如：某函数一秒种被调用100万次，你想想如果你让这个函数提高0.01毫秒的时间 ，这会给你带来多大的性能）</p>
<p>使用Profiler有个问题我们需要注意一下，因为Profiler会让你的程序运行的性能变低，像PurifyPlus这样的工具会在你的代码中插入很多代码，会导致你的程序运行效率变低，从而没发测试出在高吞吐量下的系统的性能，对此，一般有两个方法来定位系统瓶颈：</p>
<p>1）在你的代码中自己做统计，使用微秒级的计时器和函数调用计算器，每隔10秒把统计log到文件中。</p>
<p>2）分段注释你的代码块，让一些函数空转，做Hard Code的Mock，然后再测试一下系统的Throughput和Latency是否有质的变化，如果有，那么被注释的函数就是性能瓶颈，再在这个函数体内注释代码，直到找到最耗性能的语句。</p>
<p>最后再说一点，对于性能测试，不同的Throughput会出现不同的测试结果，不同的测试数据也会有不同的测试结果。所以，用于性能测试的数据非常重要，性能测试中，我们需要观测试不同Throughput的结果。</p>
<p>四、常见的系统瓶颈</p>
<p>下面这些东西是我所经历过的一些问题，也许并不全，也许并不对，大家可以补充指正，我纯属抛砖引玉。关于系统架构方面的性能调优，大家可移步看一下《由12306.cn谈谈网站性能技术》，关于Web方面的一些性能调优的东西，大家可以看看《Web开发中需要了解的东西》一文中的性能一章。我在这里就不再说设计和架构上的东西了。</p>
<p>一般来说，性能优化也就是下面的几个策略：</p>
<p>用空间换时间。各种cache如CPU L1/L2/RAM到硬盘，都是用空间来换时间的策略。这样策略基本上是把计算的过程一步一步的保存或缓存下来，这样就不用每次用的时候都要再计算一遍，比如数据缓冲，CDN，等。这样的策略还表现为冗余数据，比如数据镜象，负载均衡什么的。<br>用时间换空间。有时候，少量的空间可能性能会更好，比如网络传输，如果有一些压缩数据的算法（如前些天说的“Huffman 编码压缩算法” 和 “rsync 的核心算法”），这样的算法其实很耗时，但是因为瓶颈在网络传输，所以用时间来换空间反而能省时间。<br>简化代码。最高效的程序就是不执行任何代码的程序，所以，代码越少性能就越高。关于代码级优化的技术大学里的教科书有很多示例了。如：减少循环的层数，减少递归，在循环中少声明变量，少做分配和释放内存的操作，尽量把循环体内的表达式抽到循环外，条件表达的中的多个条件判断的次序，尽量在程序启动时把一些东西准备好，注意函数调用的开销（栈上开销），注意面向对象语言中临时对象的开销，小心使用异常（不要用异常来检查一些可接受可忽略并经常发生的错误），…… 等等，等等，这连东西需要我们非常了解编程语言和常用的库。<br>并行处理。如果CPU只有一个核，你要玩多进程，多线程，对于计算密集型的软件会反而更慢（因为操作系统调度和切换开销很大），CPU的核多了才能真正体现出多进程多线程的优势。并行处理需要我们的程序有Scalability，不能水平或垂直扩展的程序无法进行并行处理。从架构上来说，这表再为——是否可以做到不改代码只是加加机器就可以完成性能提升？<br>总之，根据2：8原则来说，20%的代码耗了你80%的性能，找到那20%的代码，你就可以优化那80%的性能。 下面的一些东西都是我的一些经验，我只例举了一些最有价值的性能调优的的方法，供你参考，也欢迎补充。</p>
<p>4.1）算法调优。算法非常重要，好的算法会有更好的性能。举几个我经历过的项目的例子，大家可以感觉一下。</p>
<p>一个是过滤算法，系统需要对收到的请求做过滤，我们把可以被filter in/out的东西配置在了一个文件中，原有的过滤算法是遍历过滤配置，后来，我们找到了一种方法可以对这个过滤配置进行排序，这样就可以用二分折半的方法来过滤，系统性能增加了50%。<br>一个是哈希算法。计算哈希算法的函数并不高效，一方面是计算太费时，另一方面是碰撞太高，碰撞高了就跟单向链表一个性能（可参看Hash Collision DoS 问题）。我们知道，算法都是和需要处理的数据很有关系的，就算是被大家所嘲笑的“冒泡排序”在某些情况下（大多数数据是排好序的）其效率会高于所有的排序算法。哈希算法也一样，广为人知的哈希算法都是用英文字典做测试，但是我们的业务在数据有其特殊性，所以，对于还需要根据自己的数据来挑选适合的哈希算法。对于我以前的一个项目，公司内某牛人给我发来了一个哈希算法，结果让我们的系统性能上升了150%。（关于各种哈希算法，你一定要看看StackExchange上的这篇关于各种hash算法的文章 ）<br>分而治之和预处理。以前有一个程序为了生成月报表，每次都需要计算很长的时间，有时候需要花将近一整天的时间。于是我们把我们找到了一种方法可以把这个算法发成增量式的，也就是说我每天都把当天的数据计算好了后和前一天的报表合并，这样可以大大的节省计算时间，每天的数据计算量只需要20分钟，但是如果我要算整个月的，系统则需要10个小时以上（SQL语句在大数据量面前性能成级数性下降）。这种分而治之的思路在大数据面前对性能有很帮助，就像merge排序一样。SQL语句和数据库的性能优化也是这一策略，如：使用嵌套式的Select而不是笛卡尔积的Select，使用视图，等等。<br>4.2）代码调优。从我的经验上来说，代码上的调优有下面这几点：</p>
<p>字符串操作。这是最费系统性能的事了，无论是strcpy, strcat还是strlen，最需要注意的是字符串子串匹配。所以，能用整型最好用整型。举几个例子，第一个例子是N年前做银行的时候，我的同事喜欢把日期存成字符串（如：2012-05-29 08:30:02），我勒个去，一个select  where between语句相当耗时。另一个例子是，我以前有个同事把一些状态码用字符串来处理，他的理由是，这样可以在界面上直接显示，后来性能调优的时候，我把这些状态码全改成整型，然后用位操作查状态，因为有一个每秒钟被调用了150K次的函数里面有三处需要检查状态，经过改善以后，整个系统的性能上升了30%左右。还有一个例子是，我以前从事的某个产品编程规范中有一条是要在每个函数中把函数名定义出来，如：const char fname[]=”functionName()”, 这是为了好打日志，但是为什么不声明成 static类型的呢？<br>多线程调优。有人说，thread is evil，这个对于系统性能在某些时候是个问题。因为多线程瓶颈就在于互斥和同步的锁上，以及线程上下文切换的成本，怎么样的少用锁或不用锁是根本（比如：多版本并发控制(MVCC)在分布式系统中的应用 中说的乐观锁可以解决性能问题），此外，还有读写锁也可以解决大多数是读操作的并发的性能问题。这里多说一点在C++中，我们可能会使用线程安全的智能指针AutoPtr或是别的一些容器，只要是线程安全的，其不管三七二十一都要上锁，上锁是个成本很高的操作，使用AutoPtr会让我们的系统性能下降得很快，如果你可以保证不会有线程并发问题，那么你应该不要用AutoPtr。我记得我上次我们同事去掉智能指针的引用计数，让系统性能提升了50%以上。对于Java对象的引用计数，如果我猜的没错的话，到处都是锁，所以，Java的性能问题一直是个问题。另外，线程不是越多越好，线程间的调度和上下文切换也是很夸张的事，尽可能的在一个线程里干，尽可能的不要同步线程。这会让你有很多的性能。<br>内存分配。不要小看程序的内存分配。malloc/realloc/calloc这样的系统调非常耗时，尤其是当内存出现碎片的时候。我以前的公司出过这样一个问题——在用户的站点上，我们的程序有一天不响应了，用GDB跟进去一看，系统hang在了malloc操作上，20秒都没有返回，重启一些系统就好了。这就是内存碎片的问题。这就是为什么很多人抱怨STL有严重的内存碎片的问题，因为太多的小内存的分配释放了。有很多人会以为用内存池可以解决这个问题，但是实际上他们只是重新发明了Runtime-C或操作系统的内存管理机制，完全于事无补。当然解决内存碎片的问题还是通过内存池，具体来说是一系列不同尺寸的内存池（这个留给大家自己去思考）。当然，少进行动态内存分配是最好的。说到内存池就需要说一下池化技术。比如线程池，连接池等。池化技术对于一些短作业来说（如http服务） 相当相当的有效。这项技术可以减少链接建立，线程创建的开销，从而提高性能。<br>异步操作。我们知道Unix下的文件操作是有block和non-block的方式的，像有些系统调用也是block式的，如：Socket下的select，Windows下的WaitforObject之类的，如果我们的程序是同步操作，那么会非常影响性能，我们可以改成异步的，但是改成异步的方式会让你的程序变复杂。异步方式一般要通过队列，要注间队列的性能问题，另外，异步下的状态通知通常是个问题，比如消息事件通知方式，有callback方式，等，这些方式同样可能会影响你的性能。但是通常来说，异步操作会让性能的吞吐率有很大提升（Throughput），但是会牺牲系统的响应时间（latency）。这需要业务上支持。<br>语言和代码库。我们要熟悉语言以及所使用的函数库或类库的性能。比如：STL中的很多容器分配了内存后，那怕你删除元素，内存也不会回收，其会造成内存泄露的假像，并可能造成内存碎片问题。再如，STL某些容器的size()==0  和 empty()是不一样的，因为，size()是O(n)复杂度，empty()是O(1)的复杂度，这个要小心。Java中的JVM调优需要使用的这些参数：-Xms -Xmx -Xmn -XX:SurvivorRatio -XX:MaxTenuringThreshold，还需要注意JVM的GC，GC的霸气大家都知道，尤其是full GC（还整理内存碎片），他就像“恐龙特级克赛号”一样，他运行的时候，整个世界的时间都停止了。<br>4.3）网络调优</p>
<p>关于网络调优，尤其是TCP Tuning（你可以以这两个关键词在网上找到很多文章），这里面有很多很多东西可以说。看看Linux下TCP/IP的那么多参数就知道了（顺便说一下，你也许不喜欢Linux，但是你不能否认Linux给我们了很多可以进行内核调优的权力）。强烈建议大家看看《TCP/IP 详解 卷1:协议》这本书。我在这里只讲一些概念上的东西。</p>
<p>A） TCP调优</p>
<p>我们知道TCP链接是有很多开销的，一个是会占用文件描述符，另一个是会开缓存，一般来说一个系统可以支持的TCP链接数是有限的，我们需要清楚地认识到TCP链接对系统的开销是很大的。正是因为TCP是耗资源的，所以，很多攻击都是让你系统上出现大量的TCP链接，把你的系统资源耗尽。比如著名的SYNC Flood攻击。</p>
<p>所以，我们要注意配置KeepAlive参数，这个参数的意思是定义一个时间，如果链接上没有数据传输，系统会在这个时间发一个包，如果没有收到回应，那么TCP就认为链接断了，然后就会把链接关闭，这样可以回收系统资源开销。（注：HTTP层上也有KeepAlive参数）对于像HTTP这样的短链接，设置一个1-2分钟的keepalive非常重要。这可以在一定程度上防止DoS攻击。有下面几个参数（下面这些参数的值仅供参考）：</p>
<p>1<br>2<br>3<br>net.ipv4.tcp_keepalive_probes = 5<br>net.ipv4.tcp_keepalive_intvl = 20<br>net.ipv4.tcp_fin_timeout = 30<br>对于TCP的TIME_WAIT这个状态，主动关闭的一方进入TIME_WAIT状态，TIME_WAIT状态将持续2个MSL(Max Segment Lifetime)，默认为4分钟，TIME_WAIT状态下的资源不能回收。有大量的TIME_WAIT链接的情况一般是在HTTP服务器上。对此，有两个参数需要注意，</p>
<p>1<br>2<br>net.ipv4.tcp_tw_reuse=1<br>net.ipv4.tcp_tw_recycle=1<br>前者表示重用TIME_WAIT，后者表示回收TIME_WAIT的资源。</p>
<p>TCP还有一个重要的概念叫RWIN（TCP Receive Window Size），这个东西的意思是，我一个TCP链接在没有向Sender发出ack时可以接收到的最大的数据包。为什么这个很重要？因为如果Sender没有收到Receiver发过来ack，Sender就会停止发送数据并会等一段时间，如果超时，那么就会重传。这就是为什么TCP链接是可靠链接的原因。重传还不是最严重的，如果有丢包发生的话，TCP的带宽使用率会马上受到影响（会盲目减半），再丢包，再减半，然后如果不丢包了，就逐步恢复。相关参数如下：</p>
<p>1<br>2<br>3<br>4<br>net.core.wmem_default = 8388608<br>net.core.rmem_default = 8388608<br>net.core.rmem_max = 16777216<br>net.core.wmem_max = 16777216<br>一般来说，理论上的RWIN应该设置成：吞吐量  * 回路时间。Sender端的buffer应该和RWIN有一样的大小，因为Sender端发送完数据后要等Receiver端确认，如果网络延时很大，buffer过小了，确认的次数就会多，于是性能就不高，对网络的利用率也就不高了。也就是说，对于延迟大的网络，我们需要大的buffer，这样可以少一点ack，多一些数据，对于响应快一点的网络，可以少一些buffer。因为，如果有丢包（没有收到ack），buffer过大可能会有问题，因为这会让TCP重传所有的数据，反而影响网络性能。（当然，网络差的情况下，就别玩什么高性能了） 所以，高性能的网络重要的是要让网络丢包率非常非常地小（基本上是用在LAN里），如果网络基本是可信的，这样用大一点的buffer会有更好的网络传输性能（来来回回太多太影响性能了）。</p>
<p>另外，我们想一想，如果网络质量非常好，基本不丢包，而业务上我们不怕偶尔丢几个包，如果是这样的话，那么，我们为什么不用速度更快的UDP呢？你想过这个问题了吗？</p>
<p>B）UDP调优</p>
<p>说到UDP的调优，有一些事我想重点说一样，那就是MTU——最大传输单元（其实这对TCP也一样，因为这是链路层上的东西）。所谓最大传输单元，你可以想像成是公路上的公交车，假设一个公交车可以最多坐70人，带宽就像是公路的车道数一样，如果一条路上最多可以容下100辆公交车，那意味着我最多可以运送7000人，但是如果公交车坐不满，比如平均每辆车只有20人，那么我只运送了2000人，于是我公路资源（带宽资源）就被浪费了。 所以，我们对于一个UDP的包，我们要尽量地让他大到MTU的最大尺寸再往网络上传，这样可以最大化带宽利用率。对于这个MTU，以太网是1500字节，光纤是4352字节，802.11无线网是7981。但是，当我们用TCP/UDP发包的时候，我们的有效负载Payload要低于这个值，因为IP协议会加上20个字节，UDP会加上8个字节（TCP加的更多），所以，一般来说，你的一个UDP包的最大应该是1500-8-20=1472，这是你的数据的大小。当然，如果你用光纤的话， 这个值就可以更大一些。（顺便说一下，对于某些NB的千光以态网网卡来说，在网卡上，网卡硬件如果发现你的包的大小超过了MTU，其会帮你做fragment，到了目标端又会帮你做重组，这就不需要你在程序中处理了）</p>
<p>再多说一下，使用Socket编程的时候，你可以使用setsockopt() 设置 SO_SNDBUF/SO_RCVBUF 的大小，TTL和KeepAlive这些关键的设置，当然，还有很多，具体你可以查看一下Socket的手册。</p>
<p>最后说一点，UDP还有一个最大的好处是multi-cast多播，这个技术对于你需要在内网里通知多台结点时非常方便和高效。而且，多播这种技术对于机会的水平扩展（需要增加机器来侦听多播信息）也很有利。</p>
<p>C）网卡调优</p>
<p>对于网卡，我们也是可以调优的，这对于千兆以及网网卡非常必要，在Linux下，我们可以用ifconfig查看网上的统计信息，如果我们看到overrun上有数据，我们就可能需要调整一下txqueuelen的尺寸（一般默认为1000），我们可以调大一些，如：ifconfig eth0 txqueuelen 5000。Linux下还有一个命令叫：ethtool可以用于设置网卡的缓冲区大小。在Windows下，我们可以在网卡适配器中的高级选项卡中调整相关的参数（如：Receive Buffers, Transmit Buffer等，不同的网卡有不同的参数）。把Buffer调大对于需要大数据量的网络传输非常有效。</p>
<p>D）其它网络性能</p>
<p>关于多路复用技术，也就是用一个线程来管理所有的TCP链接，有三个系统调用要重点注意：一个是select，这个系统调用只支持上限1024个链接，第二个是poll，其可以突破1024的限制，但是select和poll本质上是使用的轮询机制，轮询机制在链接多的时候性能很差，因主是O(n)的算法，所以，epoll出现了，epoll是操作系统内核支持的，仅当在链接活跃时，操作系统才会callback，这是由操作系统通知触发的，但其只有Linux Kernel 2.6以后才支持（准确说是2.5.44中引入的），当然，如果所有的链接都是活跃的，过多的使用epoll_ctl可能会比轮询的方式还影响性能，不过影响的不大。</p>
<p>另外，关于一些和DNS Lookup的系统调用要小心，比如：gethostbyaddr/gethostbyname，这个函数可能会相当的费时，因为其要到网络上去找域名，因为DNS的递归查询，会导致严重超时，而又不能通过设置什么参数来设置time out，对此你可以通过配置hosts文件来加快速度，或是自己在内存中管理对应表，在程序启动时查好，而不要在运行时每次都查。另外，在多线程下面，gethostbyname会一个更严重的问题，就是如果有一个线程的gethostbyname发生阻塞，其它线程都会在gethostbyname处发生阻塞，这个比较变态，要小心。（你可以试试GNU的gethostbyname_r()，这个的性能要好一些） 这种到网上找信息的东西很多，比如，如果你的Linux使用了NIS，或是NFS，某些用户或文件相关的系统调用就很慢，所以要小心。</p>
<p>4.4）系统调优</p>
<p>A）I/O模型</p>
<p>前面说到过select/poll/epoll这三个系统调用，我们都知道，Unix/Linux下把所有的设备都当成文件来进行I/O，所以，那三个操作更应该算是I/O相关的系统调用。说到  I/O模型，这对于我们的I/O性能相当重要，我们知道，Unix/Linux经典的I/O方式是（关于Linux下的I/O模型，大家可以读一下这篇文章《使用异步I/O大大提高性能》）：</p>
<p>第一种，同步阻塞式I/O，这个不说了。</p>
<p>第二种，同步无阻塞方式。其通过fctnl设置 O_NONBLOCK 来完成。</p>
<p>第三种，对于select/poll/epoll这三个是I/O不阻塞，但是在事件上阻塞，算是：I/O异步，事件同步的调用。</p>
<p>第四种，AIO方式。这种I/O 模型是一种处理与 I/O 并行的模型。I/O请求会立即返回，说明请求已经成功发起了。在后台完成I/O操作时，向应用程序发起通知，通知有两种方式：一种是产生一个信号，另一种是执行一个基于线程的回调函数来完成这次 I/O 处理过程。</p>
<p>第四种因为没有任何的阻塞，无论是I/O上，还是事件通知上，所以，其可以让你充分地利用CPU，比起第二种同步无阻塞好处就是，第二种要你一遍一遍地去轮询。Nginx之所所以高效，是其使用了epoll和AIO的方式来进行I/O的。</p>
<p>再说一下Windows下的I/O模型，</p>
<p>a）一个是WriteFile系统调用，这个系统调用可以是同步阻塞的，也可以是同步无阻塞的，关于看文件是不是以Overlapped打开的。关于同步无阻塞，需要设置其最后一个参数Overlapped，微软叫Overlapped I/O，你需要WaitForSingleObject才能知道有没有写完成。这个系统调用的性能可想而知。</p>
<p>b）另一个叫WriteFileEx的系统调用，其可以实现异步I/O，并可以让你传入一个callback函数，等I/O结束后回调之， 但是这个回调的过程Windows是把callback函数放到了APC（Asynchronous Procedure Calls）的队列中，然后，只用当应用程序当前线程成为可被通知状态（Alterable）时，才会被回调。只有当你的线程使用了这几个函数时WaitForSingleObjectEx, WaitForMultipleObjectsEx, MsgWaitForMultipleObjectsEx, SignalObjectAndWait 和 SleepEx，线程才会成为Alterable状态。可见，这个模型，还是有wait，所以性能也不高。</p>
<p>c）然后是IOCP – IO Completion Port，IOCP会把I/O的结果放在一个队列中，但是，侦听这个队列的不是主线程，而是专门来干这个事的一个或多个线程去干（老的平台要你自己创建线程，新的平台是你可以创建一个线程池）。IOCP是一个线程池模型。这个和Linux下的AIO模型比较相似，但是实现方式和使用方式完全不一样。</p>
<p>当然，真正提高I/O性能方式是把和外设的I/O的次数降到最低，最好没有，所以，对于读来说，内存cache通常可以从质上提升性能，因为内存比外设快太多了。对于写来说，cache住要写的数据，少写几次，但是cache带来的问题就是实时性的问题，也就是latency会变大，我们需要在写的次数上和相应上做权衡。</p>
<p>B）多核CPU调优</p>
<p>关于CPU的多核技术，我们知道，CPU0是很关键的，如果0号CPU被用得过狠的话，别的CPU性能也会下降，因为CPU0是有调整功能的，所以，我们不能任由操作系统负载均衡，因为我们自己更了解自己的程序，所以，我们可以手动地为其分配CPU核，而不会过多地占用CPU0，或是让我们关键进程和一堆别的进程挤在一起。</p>
<p>对于Windows来说，我们可以通过“任务管理器”中的“进程”而中右键菜单中的“设置相关性……”（Set Affinity…）来设置并限制这个进程能被运行在哪些核上。<br>对于Linux来说，可以使用taskset命令来设置（你可以通过安装schedutils来安装这个命令：apt-get install schedutils）<br>多核CPU还有一个技术叫NUMA技术（Non-Uniform Memory Access）。传统的多核运算是使用SMP(Symmetric Multi-Processor )模式，多个处理器共享一个集中的存储器和I/O总线。于是就会出现一致存储器访问的问题，一致性通常意味着性能问题。NUMA模式下，处理器被划分成多个node， 每个node有自己的本地存储器空间。关于NUMA的一些技术细节，你可以查看一下这篇文章《Linux 的 NUMA 技术》，在Linux下，对NUMA调优的命令是：numactl 。如下面的命令：（指定命令“myprogram arg1 arg2”运行在node 0 上，其内存分配在node 0 和 1上）</p>
<p>1<br>numactl —cpubind=0 —membind=0,1 myprogram arg1 arg2<br>当然，上面这个命令并不好，因为内存跨越了两个node，这非常不好。最好的方式是只让程序访问和自己运行一样的node，如：</p>
<p>1<br>$ numactl —membind 1 —cpunodebind 1 —localalloc myapplication<br>C）文件系统调优</p>
<p>关于文件系统，因为文件系统也是有cache的，所以，为了让文件系统有最大的性能。首要的事情就是分配足够大的内存，这个非常关键，在Linux下可以使用free命令来查看 free/used/buffers/cached，理想来说，buffers和cached应该有40%左右。然后是一个快速的硬盘控制器，SCSI会好很多。最快的是Intel SSD 固态硬盘，速度超快，但是写次数有限。</p>
<p>接下来，我们就可以调优文件系统配置了，对于Linux的Ext3/4来说，几乎在所有情况下都有所帮助的一个参数是关闭文件系统访问时间，在/etc/fstab下看看你的文件系统 有没有noatime参数（一般来说应该有），还有一个是dealloc，它可以让系统在最后时刻决定写入文件发生时使用哪个块，可优化这个写入程序。还要注间一下三种日志模式：data=journal、data=ordered和data=writeback。默认设置data=ordered提供性能和防护之间的最佳平衡。</p>
<p>当然，对于这些来说，ext4的默认设置基本上是最佳优化了。</p>
<p>这里介绍一个Linux下的查看I/O的命令—— iotop，可以让你看到各进程的磁盘读写的负载情况。</p>
<p>其它还有一些关于NFS、XFS的调优，大家可以上google搜索一些相关优化的文章看看。关于各文件系统，大家可以看一下这篇文章——《Linux日志文件系统及性能分析》</p>
<p>4.5）数据库调优</p>
<p>数据库调优并不是我的强项，我就仅用我非常有限的知识说上一些吧。注意，下面的这些东西并不一定正确，因为在不同的业务场景，不同的数据库设计下可能会得到完全相反的结论，所以，我仅在这里做一些一般性的说明，具体问题还要具体分析。</p>
<p>A）数据库引擎调优</p>
<p>我对数据库引擎不是熟，但是有几个事情我觉得是一定要去了解的。</p>
<p>数据库的锁的方式。这个非常非常地重要。并发情况下，锁是非常非常影响性能的。各种隔离级别，行锁，表锁，页锁，读写锁，事务锁，以及各种写优先还是读优先机制。性能最高的是不要锁，所以，分库分表，冗余数据，减少一致性事务处理，可以有效地提高性能。NoSQL就是牺牲了一致性和事务处理，并冗余数据，从而达到了分布式和高性能。<br>数据库的存储机制。不但要搞清楚各种类型字段是怎么存储的，更重要的是数据库的数据存储方式，是怎么分区的，是怎么管理的，比如Oracle的数据文件，表空间，段，等等。了解清楚这个机制可以减轻很多的I/O负载。比如：MySQL下使用show engines;可以看到各种存储引擎的支持。不同的存储引擎有不同的侧重点，针对不同的业务或数据库设计会让你有不同的性能。<br>数据库的分布式策略。最简单的就是复制或镜像，需要了解分布式的一致性算法，或是主主同步，主从同步。通过了解这种技术的机理可以做到数据库级别的水平扩展。<br>B）SQL语句优化</p>
<p>关于SQL语句的优化，首先也是要使用工具，比如：MySQL SQL Query Analyzer，Oracle SQL Performance Analyzer，或是微软SQL Query Analyzer，基本上来说，所有的RMDB都会有这样的工具，来让你查看你的应用中的SQL的性能问题。 还可以使用explain来看看SQL语句最终Execution Plan会是什么样的。</p>
<p>还有一点很重要，数据库的各种操作需要大量的内存，所以服务器的内存要够，优其应对那些多表查询的SQL语句，那是相当的耗内存。</p>
<p>下面我根据我有限的数据库SQL的知识说几个会有性能问题的SQL：</p>
<p>全表检索。比如：select <em> from user where lastname = “xxxx”，这样的SQL语句基本上是全表查找，线性复杂度O(n)，记录数越多，性能也越差（如：100条记录的查找要50ms，一百万条记录需要5分钟）。对于这种情况，我们可以有两种方法提高性能：一种方法是分表，把记录数降下来，另一种方法是建索引（为lastname建索引）。索引就像是key-value的数据结构一样，key就是where后面的字段，value就是物理行号，对索引的搜索复杂度是基本上是O(log(n)) ——用B-Tree实现索引（如：100条记录的查找要50ms，一百万条记录需要100ms）。<br>索引。对于索引字段，最好不要在字段上做计算、类型转换、函数、空值判断、字段连接操作，这些操作都会破坏索引原本的性能。当然，索引一般都出现在Where或是Order by字句中，所以对Where和Order by子句中的子段最好不要进行计算操作，或是加上什么NOT之类的，或是使用什么函数。<br>多表查询。关系型数据库最多的操作就是多表查询，多表查询主要有三个关键字，EXISTS，IN和JOIN（关于各种join，可以参看图解SQL的Join一文）。基本来说，现代的数据引擎对SQL语句优化得都挺好的，JOIN和IN/EXISTS在结果上有些不同，但性能基本上都差不多。有人说，EXISTS的性能要好于IN，IN的性能要好于JOIN，我各人觉得，这个还要看你的数据、schema和SQL语句的复杂度，对于一般的简单的情况来说，都差不多，所以千万不要使用过多的嵌套，千万不要让你的SQL太复杂，宁可使用几个简单的SQL也不要使用一个巨大无比的嵌套N级的SQL。还有人说，如果两个表的数据量差不多，Exists的性能可能会高于In，In可能会高于Join，如果这两个表一大一小，那么子查询中，Exists用大表，In则用小表。这个，我没有验证过，放在这里让大家讨论吧。另，有一篇关于SQL Server的文章大家可以看看《IN vs JOIN vs EXISTS》<br>JOIN操作。有人说，Join表的顺序会影响性能，只要Join的结果集是一样，性能和join的次序无关。因为后台的数据库引擎会帮我们优化的。Join有三种实现算法，嵌套循环，排序归并，和Hash式的Join。（MySQL只支持第一种）<br>嵌套循环，就好像是我们常见的多重嵌套循环。注意，前面的索引说过，数据库的索引查找算法用的是B-Tree，这是O(log(n))的算法，所以，整个算法复法度应该是O(log(n)) </em> O(log(m)) 这样的。<br>Hash式的Join，主要解决嵌套循环的O(log(n))的复杂，使用一个临时的hash表来标记。<br>排序归并，意思是两个表按照查询字段排好序，然后再合并。当然，索引字段一般是排好序的。<br>还是那句话，具体要看什么样的数据，什么样的SQL语句，你才知道用哪种方法是最好的。</p>
<p>部分结果集。我们知道MySQL里的Limit关键字，Oracle里的rownum，SQL Server里的Top都是在限制前几条的返回结果。这给了我们数据库引擎很多可以调优的空间。一般来说，返回top n的记录数据需要我们使用order by，注意在这里我们需要为order by的字段建立索引。有了被建索引的order by后，会让我们的select语句的性能不会被记录数的所影响。使用这个技术，一般来说我们前台会以分页方式来显现数据，Mysql用的是OFFSET，SQL Server用的是FETCH NEXT，这种Fetch的方式其实并不好是线性复杂度，所以，如果我们能够知道order by字段的第二页的起始值，我们就可以在where语句里直接使用&gt;=的表达式来select，这种技术叫seek，而不是fetch，seek的性能比fetch要高很多。<br>字符串。正如我前面所说的，字符串操作对性能上有非常大的恶梦，所以，能用数据的情况就用数字，比如：时间，工号，等。<br>全文检索。千万不要用Like之类的东西来做全文检索，如果要玩全文检索，可以尝试使用Sphinx。<br>其它。<br>不要select *，而是明确指出各个字段，如果有多个表，一定要在字段名前加上表名，不要让引擎去算。<br>不要用Having，因为其要遍历所有的记录。性能差得不能再差。<br>尽可能地使用UNION ALL  取代  UNION。<br>索引过多，insert和delete就会越慢。而update如果update多数索引，也会慢，但是如果只update一个，则只会影响一个索引表。<br>等等。<br>关于SQL语句的优化，网上有很多文章， 不同的数据库引擎有不同的优化技巧，正如本站以前转发的《MySQL性能优化的最佳20+条经验》</p>
<p>先写这么多吧，欢迎大家指正补充。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一、系统性能定义</p>
<p>让我们先来说说如何什么是系统性能。这个定义非常关键，如果我们不清楚什么是系统性能，那么我们将无法定位之。我见过很多朋友会觉得这很容易，但是仔细一问，其实他们并没有一个比较系统的方法，所以，在这里我想告诉大家如何系统地来定位性能。 总体来说，系统性能就是两个事：</p>
<p>Throughput ，吞吐量。也就是每秒钟可以处理的请求数，任务数。<br>Latency， 系统延迟。也就是系统在处理一个请求或一个任务时的延迟。<br>一般来说，一个系统的性能受到这两个条件的约束，缺一不可。比如，我的系统可以顶得住一百万的并发，但是系统的延迟是2分钟以上，那么，这个一百万的负载毫无意义。系统延迟很短，但是吞吐量很低，同样没有意义。所以，一个好的系统的性能测试必然受到这两个条件的同时作用。 有经验的朋友一定知道，这两个东西的一些关系：</p>
<p>Throughput越大，Latency会越差。因为请求量过大，系统太繁忙，所以响应速度自然会低。<br>Latency越好，能支持的Throughput就会越高。因为Latency短说明处理速度快，于是就可以处理更多的请求。<br>]]>
    
    </summary>
    
      <category term="调优" scheme="http://cloudbps.com/categories/%E8%B0%83%E4%BC%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Nginx生产环境调优]]></title>
    <link href="http://cloudbps.com/2015/01/10/nginx_productiontun/"/>
    <id>http://cloudbps.com/2015/01/10/nginx_productiontun/</id>
    <published>2015-01-10T04:19:00.000Z</published>
    <updated>2015-01-10T08:32:03.000Z</updated>
    <content type="html"><![CDATA[<h4 id="一、内存调优">一、内存调优</h4>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">内核关于内存的选项都在/proc/sys/vm目录下.</div><div class="line"><span class="number">1</span>.pdflush,用于回写内存中的脏数据到硬盘。可以通过 /proc/sys/vm/vm.dirty_background_ratio调整。</div><div class="line">首先查看这个值默认应该是<span class="number">10</span>。</div><div class="line">[root<span class="variable">@esf</span> ~]<span class="comment"># cat /proc/sys/vm/dirty_background_ratio</span></div><div class="line"><span class="number">10</span></div><div class="line">这个值是一个阀值,说明如果内存中的脏数据达到系统总内存的<span class="number">10</span>%时,那么pdflush进程就会启动,将内存中的脏数据写回硬盘.这个值可适当调高.可获得更快的写入速度.</div><div class="line"><span class="number">2</span>.swappiness选项</div><div class="line">[root<span class="variable">@esf</span> ~]<span class="comment"># cat /proc/sys/vm/swappiness</span></div><div class="line"><span class="number">60</span></div><div class="line">swappiness表示使用swap分区的使用程度,可以适当调整swappiness=<span class="number">0</span>的时候表示尽可能使用物理内存swap空间.swappiness=<span class="number">100</span>积极使用swap.</div><div class="line"><span class="number">3</span>.dirty_ratio</div><div class="line">[root<span class="variable">@esf</span> ~]<span class="comment"># cat /proc/sys/vm/dirty_ratio</span></div><div class="line"><span class="number">40</span></div><div class="line">dirty_ratio的值是数据写进内存的阀值,<span class="number">40</span>%是指当系统内存已经缓存了<span class="number">40</span>%的数据以后,就不再往内存中缓存数据了.</div></pre></td></tr></table></figure>

<p><a id="more"></a></p>
<h4 id="二、磁盘I/O调优">二、磁盘I/O调优</h4>
<ul>
<li>Linux磁盘I/O调优<ul>
<li>概述</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span>   磁盘调优目录：/sys/block</div><div class="line"><span class="number">2.</span>   磁盘调优均是调内核参数，要求安装kernel-doc包，</div><div class="line"><span class="number">3.</span>   调预先读请求量（默认为<span class="number">128</span>kb）</div><div class="line"><span class="comment"># blockdev –getra /dev/sda</span></div><div class="line"><span class="comment"># blockdev –setra 512 /dev/sda</span></div><div class="line">实际修改/sys/block/sda/queue/read_ahead_kb=<span class="number">256</span>kb；如果读情况多则将此参数调大一点，如写请求读，则将此参数调小一点</div><div class="line"><span class="number">4.</span>   调磁盘队列：队列长则处理快，提升硬盘的吞吐量，但会消耗更大的内存</div><div class="line">Queue length：/sys/block/sda/queue/nr_requests</div><div class="line"><span class="comment"># cat /sys/block/sda/queue/nr_requests</span></div><div class="line"><span class="number">512</span></div><div class="line"><span class="comment">#默认128，没有单位</span></div><div class="line">二）、 磁盘I/O的<span class="number">4</span>种调度算法</div><div class="line"></div><div class="line"><span class="number">1.</span>   CFQ(完全公平排队I/O调度程序)(elevator=cfq)</div><div class="line">特点:</div><div class="line">  这是默认算法，对于通用服务器来说通常是最好的选择。它试图均匀地分布对I/O带宽的访问。是deadline和anticipatory调度器的折中方案.</div><div class="line">  CFQ对于多媒体应用(video,audio)和桌面系统是最好的选择.</div><div class="line">  CFQ赋予I/O请求一个优先级,而I/O优先级请求独立于进程优先级,高优先级的进程的读写不能自动地继承高的I/O优先级.</div><div class="line">  CFQ基于<span class="number">64</span>位的队列请求,使用的轮询的方法处理队列.</div><div class="line">调优参数：</div><div class="line"><span class="comment">#  /sys/block/sda/queue/iosched/queued：轮询时每次处理的最大请求数</span></div><div class="line"><span class="comment">#  /sys/block/sda/queue/iosched/quantum：每隔多少个请求数做一次轮询</span></div><div class="line">cfq调优工具ionice</div><div class="line">ionice可以更改任务的类型和优先级,不过只有cfq调度程序可以用ionice.</div><div class="line">有三个例子说明ionice的功能:</div><div class="line"> 采用cfq的实时调度（实时调度：c1）,优先级为<span class="number">7</span>（数字越低优先级越高）</div><div class="line"><span class="comment"># ionice -c1 -n7 -ptime dd if=/dev/sda1 f=/tmp/test bs=2M count=300&</span></div><div class="line"> 采用缺省的磁盘I/O调度（轮询调度：c2）,优先级为<span class="number">3</span></div><div class="line"><span class="comment"># ionice -c2 -n3 -ptime dd if=/dev/sda1 f=/tmp/test bs=2M count=300&</span></div><div class="line"> 采用空闲的磁盘调度（idle调度：c3）,优先级为<span class="number">0</span></div><div class="line"><span class="comment"># ionice -c3 -n0 -ptime dd if=/dev/sda1 f=/tmp/test bs=2M count=300&</span></div><div class="line"><span class="comment">#ionice的三种调度方法,实时调度最高,其次是缺省的I/O调度,最后是空闲的磁盘调度.</span></div><div class="line">ionice的磁盘调度优先级有<span class="number">8</span>种,最高是<span class="number">0</span>,最低是<span class="number">7.</span></div><div class="line">注意,磁盘调度的优先级与进程nice的优先级没有关系.一个是针对进程I/O的优先级,一个是针对进程CPU的优先级.</div><div class="line"><span class="number">2.</span>   Deadline（截止时间调度程序）(elevator=deadline)：</div><div class="line">特点:</div><div class="line">  Deadline确保了在一个截止时间内服务请求,这个截止时间是可调整的,而默认读期限短于写期限.这样就防止了写操作因为不能被读取而饿死的现象.</div><div class="line">  这个算法试图把每次请求的延迟降至最低。该算法重排了请求的顺序来提高性能。可以调队列的过期的读写过程，如 read_expire 和 write_expire 二个参数来控制多久内一定要读到数据，超时就放弃排序。</div><div class="line">  比较合适小文件。还可以使用打开 front_merges 来进行合并邻近文件。Deadline对数据库环境(ORACLE RAC,MYSQL等)是最好的选择.</div><div class="line">调优：</div><div class="line"><span class="comment"># echo deadline &gt;/sys/block/sda/queue/scheduler</span></div><div class="line"><span class="comment"># more /sys/block/sda/queue/scheduler</span></div><div class="line"> noop anticipatory [deadline] cfq</div><div class="line"><span class="comment"># ls /sys/block/sda/queue/iosched/</span></div><div class="line">fifo_batch  front_merges  read_expire  write_expire  writes_starved</div><div class="line"><span class="comment"># cat iosched/read_expire</span></div><div class="line"><span class="number">500</span>    <span class="comment">#默认500ms</span></div><div class="line"><span class="comment"># cat iosched/write_expire</span></div><div class="line"><span class="number">5000</span>   <span class="comment">#默认5000ms</span></div><div class="line"><span class="comment"># cat iosched/front_merges</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="comment">#默认为1，请求整合，新的请求和之前请求有关联，则优先处理该请求,对IO性能没有影响，但优化了磁盘处理。</span></div><div class="line"><span class="number">3.</span>   Anticipatory（预料I/O调度程序）(elevator=<span class="keyword">as</span>):</div><div class="line">特点：</div><div class="line">  预想调度算法。优化完成率，改善读请求。</div><div class="line">  本质上与Deadline一样,但在最后一次读操作后，要等待<span class="number">6</span>ms才能继续进行对其它I/O请求进行调度。可以从应用程序中预订一个新的读请求,改进读 操作的执行，但以一些写操作为代价，它会在每个<span class="number">6</span>ms中插入新的I/O操作,而会将一些小写入流合并成一个大写入流，用写入延时换取最大的写入吞吐量。</div><div class="line">  AS适合于写入较多的环境,比如文件服务器；适合大文件处理，适合web server等。AS对数据库环境表现很差。</div><div class="line">调优：</div><div class="line"><span class="comment"># echo “anticipatory”&gt;/sys/block/sda/queue/scheduler</span></div><div class="line"><span class="comment"># more iosched/antic_expire</span></div><div class="line"><span class="number">6</span>       <span class="comment">#默认为6秒</span></div><div class="line"><span class="comment"># more /sys/block/sda/queue/iosched/read_expire</span></div><div class="line"><span class="number">125</span>      <span class="comment">#读的最大队列时间</span></div><div class="line"><span class="comment"># more /sys/block/sda/queue/iosched/write_expire</span></div><div class="line"><span class="number">250</span>      <span class="comment">#写的最大队列时间</span></div><div class="line">注：测试时一定要清空缓存</div><div class="line"><span class="comment"># free –m    #查看缓存</span></div><div class="line">             total    used   free   shared    buffers     cached</div><div class="line">Mem:        <span class="number">4054</span>    <span class="number">506</span>   <span class="number">3548</span>   <span class="number">0</span>        <span class="number">140</span>        <span class="number">256</span></div><div class="line">-/+ buffers/cache:      <span class="number">108</span>   <span class="number">3945</span></div><div class="line">Swap:         <span class="number">8189</span>   <span class="number">0</span>    <span class="number">8189</span></div><div class="line">测试：</div><div class="line"><span class="comment"># sysctl -w vm.drop_caches=3   #清空缓存</span></div><div class="line"><span class="comment"># rpm –ivh elevator-test-0.1-3.i386.rpm  #安装测试软件</span></div><div class="line"><span class="comment"># dd if=/dev/urandom of=/root/bigfile bs=1M count=100</span></div><div class="line"><span class="comment"># watch –n 1 ls –lh /root/bigfile   #每隔一秒查写入bigfile的数据量</span></div><div class="line"> 默认调度类型为cfq下，测试读数据速度（测试时要求清空缓存）</div><div class="line"><span class="comment"># cat /sys/block/sda/queue/scheduler</span></div><div class="line">noop anticipatory deadline [cfq]</div><div class="line">et_start reader /root/bigfile</div><div class="line">Launching</div><div class="line">Reading <span class="number">25600</span> pages</div><div class="line">Read <span class="number">20000</span> pages</div><div class="line">real    <span class="number">0</span>m1<span class="number">.552</span>s</div><div class="line">user    <span class="number">0</span>m0<span class="number">.011</span>s</div><div class="line">sys     <span class="number">0</span>m0<span class="number">.147</span>s</div><div class="line"> 将调度类型改为anticipatory，测试读数据速度（测试时要求清空缓存）</div><div class="line"><span class="comment"># echo “anticipatory”&gt;/sys/block/sda/queue/scheduler</span></div><div class="line">noop anticipatory deadline [anticipatory]</div><div class="line"><span class="comment"># cat /sys/block/sda/queue/iosched/antic_expire</span></div><div class="line"><span class="number">12</span>    <span class="comment">#该值默认为6，为提高速度，改成12</span></div><div class="line">et_start reader /root/bigfile</div><div class="line">Launching</div><div class="line">Reading <span class="number">25600</span> pages</div><div class="line">Read <span class="number">20000</span> pages</div><div class="line">real    <span class="number">0</span>m1<span class="number">.456</span>s</div><div class="line">user    <span class="number">0</span>m0<span class="number">.007</span>s</div><div class="line">sys     <span class="number">0</span>m0<span class="number">.144</span>s</div><div class="line"> 结论：很明显读的数度提高了。</div><div class="line"><span class="number">4.</span>   NOOP（电梯式调度程序）(elevator=noop):</div><div class="line">特点：</div><div class="line">  不做任何调优，主要用于节省CPU资源。</div><div class="line">  Noop调度算法指的是当请求被存储到队列并交由I/O子系统处理时由磁盘硬件对其进行优化。该算法一般只对一些特定的硬件（例如RAM disk和TCQ disk等）。</div><div class="line">  Noop对于I/O不那么操心，对所有的I/O请求都用FIFO队列形式处理，默认认为 I/O不会存在性能问题。这也使得CPU也不用那么操心</div><div class="line">三）、 I/O调度算法使用建议</div><div class="line"></div><div class="line"><span class="number">1.</span>   Deadline I/O scheduler</div><div class="line">   在这个中 deadline 调度算法通过降低性能而获得更短的等待时间，它使用轮询的调度器,简洁小巧,提供了最小的读取延迟</div><div class="line">   和尚佳的吞吐量,特别适合于读取较多的环境(比如数据库,Oracle <span class="number">10</span>G 之类).</div><div class="line"><span class="number">2.</span>   Anticipatory I/O scheduler</div><div class="line">   anticipatory 算法通过增加等待时间来获得更高的性能，假设一个块设备只有一个物理查找磁头(例如一个单独的SATA硬盘),将多个随机的小写入流合并成一个大写入流 (相当于给随机读写变顺序读写), 使用这个原理来使用读取写入的延时换取最大的读取写入吞吐量.适用于大多数环境,特别是读取写入较多的环境,比如文件服务器,Web 应用,App等应用我们可以采纳<span class="keyword">as</span>调度.后面我会教大家怎么调这个的合并的等待时间。</div><div class="line"><span class="number">3.</span>   CFQ I/O scheduler</div><div class="line">这个是 对所有因素也都做了折中而尽量获得公平性,使用QoS策略为所有任务分配等量的带宽,避免进程被饿死并实现了较低的延迟,可以认为是上述两种调度器的折中.适用于有大量进程的多用户系统。</div></pre></td></tr></table></figure>

<h4 id="三、_sysctl-conf参数的调整">三、 sysctl.conf参数的调整</h4>
<ul>
<li>优化TIME_WAIT</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">tcp连接断开后，会以TIME_WAIT状态保留一定的时候，然后才会释放端口。当并发很多的时候，就会产生大量的TIME_WAIT，无法及时断开，占用大量的端口和服务器资源。优化TCP的内核参数，及时处理TIME_WAIT</div><div class="line">查看TIME_WAIT的数量</div><div class="line"># netstat -n | awk ‘/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}’</div><div class="line">优化</div><div class="line"># vim /etc/sysctl.conf</div><div class="line">net.ipv4.tcp_syncookies = 1     //开户SYN Cookies，当出现等待队列溢出时，启用cookies来处理，防范少量SYN攻击</div><div class="line">net.ipv4.tcp_tw_reuse = 1       //开户重用，允许TIME_WAIT sockets重新用于新的TCP连接</div><div class="line">net.ipv4.tcp_tw_recycle = 1     //开户TCP连接中TIME_WAIT sockets的快速回收</div><div class="line">net.ipv4.tcp_fin_timeout = 30       //修改TIMEOUT的时间</div><div class="line">net.ipv4.tcp_keepalive_time = 1200      //当keepalive起作用的时候，TCP发送keepalive消息的频度，缺少是2小时，改为20分钟</div><div class="line">net.ipv4.ip_local_port_range = 10000 65000      //修改端口范围，允许更多的连接</div><div class="line">net.ipv4.tcp_max_syn_backlog = 8192     //SYN队列的长度，默认为1024，加大队列长度为8192，以容纳更多等待连接的网络连接</div><div class="line">net.ipv4.tcp_max_tw_buckets = 5000      //系统同时保持TIME_WAIT的最大数量，如果超过这个数字，TIME_WAIT将立即被清除</div><div class="line">net.core.netdev_max_backlog = 32768     //每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目。</div><div class="line">net.core.somaxconn = 32768      //web应用中listen函数的backlog默认会给我们内核参数的net.core.somaxconn限制到128，而nginx定义的NGX_LISTEN_BACKLOG默认为511，所以有必要调整这个值。</div><div class="line">net.ipv4.tcp_wmem = 8192 436600 873200  //TCP写buffer</div><div class="line">net.ipv4.tcp_rmem  = 32768 436600 873200    //TCP读buffer</div><div class="line">net.inet.tcp.sendspace=65536  //最大的待发送TCP数据缓冲区空间</div><div class="line">net.inet.tcp.recvspace=65536  //最大的接受TCP缓冲区空间</div><div class="line">net.inet.udp.sendspace=65535  //最大的接受UDP缓冲区大小</div><div class="line">net.inet.udp.maxdgram=65535  //最大的发送UDP数据缓冲区大小</div><div class="line">net.local.stream.sendspace=65535  //本地套接字连接的数据发送空间</div><div class="line">最后使用命令sysctl让其生效</div><div class="line"># sysctl -p</div></pre></td></tr></table></figure>

<h4 id="四、_网络调优">四、 网络调优</h4>
<ul>
<li>双网卡绑定以提高带宽</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span>安装软件</div><div class="line">apt-get install ifenslave</div><div class="line"><span class="number">2.</span>修改配置文件</div><div class="line">/etc/network/interfaces</div><div class="line">auto lo</div><div class="line">iface lo inet loopback</div><div class="line">iface eth0 inet dhcp</div><div class="line">iface eth1 inet dhcp</div><div class="line">auto bond0</div><div class="line">iface bond0 inet static</div><div class="line">address <span class="number">64.0</span><span class="number">.177</span><span class="number">.20</span></div><div class="line">netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></div><div class="line">gateway <span class="number">64.0</span><span class="number">.177</span><span class="number">.254</span></div><div class="line">up ifenslave bond0 eth0 eth1</div><div class="line">down ifenslave -d bond0 eth0 eth1</div><div class="line"><span class="number">3.</span>加载模块</div><div class="line">vi /etc/modules</div><div class="line">bonding</div></pre></td></tr></table></figure>

<h4 id="五、_nginx调优">五、 nginx调优</h4>
<ul>
<li>配置文件调优</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">worker_processes <span class="number">8</span>;  //nginx进程数，建议按照cpu数目来指定，一般为它的倍数。</div><div class="line">worker_cpu_affinity <span class="number">00000001</span> <span class="number">00000010</span> <span class="number">00000100</span> <span class="number">00001000</span> <span class="number">00010000</span> <span class="number">00100000</span> <span class="number">01000000</span> <span class="number">10000000</span>;  //为每个进程分配cpu，上例中将<span class="number">8</span>个进程分配到<span class="number">8</span>个cpu，当然可以写多个，或者将一个进程分配到多个cpu。</div><div class="line">worker_rlimit_nofile <span class="number">102400</span>;  //这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n的值保持一致。</div><div class="line">use epoll;   //使用epoll的I/O模型，这个不用说了吧.</div><div class="line">worker_connections <span class="number">102400</span>;   //每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为worker_processes*worker_connections。</div><div class="line">keepalive_timeout <span class="number">60</span>;  //keepalive超时时间。</div><div class="line">limit_rate_after <span class="number">2</span>m;</div><div class="line">                                                //限制速度，当用户请求的文件超过<span class="number">2</span>M的时候，开始限速，限制为<span class="number">128</span>k</div><div class="line">limit_rate  <span class="number">128</span>k;</div><div class="line">二）、安装插件调优</div><div class="line"></div><div class="line">安装Google插件，以实现加速内存的分配和回收</div><div class="line">TCMallocde的全称为Thread-Caching Malloc，是谷歌开发的开源工具google-perftools中得一个成员。与标准的glibc库的Malloc相比，TCMalloc库在内存 分配效率和速度上要高很多，这在很大程度上提高了服务器在高并发情况下的性能，从而降低了系统的负载。</div><div class="line">要安装TCMalloc库，需要安装libunwind（<span class="number">32</span>位操作系统不需要安装）和google-perftools两个软件包，libunwind库位基于<span class="number">64</span>位cpu和操作系统的程序提供了基本函数调用链和函数调用寄存器功能。</div><div class="line"><span class="number">1</span>、安装libunwind库</div><div class="line">可以从http://mirror.yongbok.net/nongnu/libunwind/ 下载相应的版本</div><div class="line">下载地址：http://mirror.yongbok.net/nongnu/libunwind/libunwind-<span class="number">0.99</span>.tar.gz</div><div class="line"><span class="comment"># tar xnf libunwind-0.99.tar.gz</span></div><div class="line"><span class="comment"># cd libunwind-0.99/</span></div><div class="line"><span class="comment"># CFLAGS=-fPIC ./configure</span></div><div class="line"><span class="comment"># make CFLAGS=-fPIC</span></div><div class="line"><span class="comment"># make CFLAGS=-fPIC install</span></div><div class="line"><span class="number">2</span>、安装google-perftools</div><div class="line">可从http://code.google.com/p/gperftools/ 下载相应的版本。</div><div class="line">下载地址：http://gperftools.googlecode.com/files/google-perftools- <span class="number">1.9</span>.tar.gz  最新版：http://gperftools.googlecode.com/files/gperftools-<span class="number">2.0</span>.tar.gz 这里用的google-perftools-<span class="number">1.9</span>.tar.gz</div><div class="line"><span class="comment"># tar xvf google-perftools-1.9.tar.gz</span></div><div class="line"><span class="comment"># cd google-perftools-1.9/</span></div><div class="line"><span class="comment"># ./configure</span></div><div class="line"><span class="comment"># make && make install</span></div><div class="line"><span class="comment"># echo “/usr/local/lib“ &gt;&gt; /etc/ld.so.conf.d/usr_local_lib.conf</span></div><div class="line"><span class="comment"># ldconfig</span></div><div class="line">至此google-perftools安装完成</div><div class="line"><span class="number">3</span>、重新编译nginx</div><div class="line">为了使nginx支持google-perftools，需要在安装过程中添加”–<span class="keyword">with</span>-google_perftools_module”选项重新编译nginx。安装如下：</div><div class="line"><span class="comment"># ./configure –with-google_perftools_module –with-http_stub_status_module –with-http_ssl_module –prefix=/usr/local/webserver/nginx</span></div><div class="line"><span class="comment"># make</span></div><div class="line"><span class="comment"># make install</span></div><div class="line">到这里nginx安装完成</div><div class="line"><span class="number">4</span>、为google-perftools添加线程目录</div><div class="line">创建一个线程目录，这里将文件放在/tmp/tcmalloc下。</div><div class="line"><span class="comment"># mkdir /tmp/tcmalloc</span></div><div class="line"><span class="comment"># chmod 0777 /tmp/tcmalloc</span></div><div class="line"><span class="number">5</span>、修改nginx主配置文件</div><div class="line">修改nginx.conf文件，在pid这行的下面添加如下代码：</div><div class="line">google_perftools_profiles    /tmp/tcmalloc;</div><div class="line">接着，重启nginx即可完成google-perftools的加载。</div><div class="line"><span class="number">6</span>、验证运行状态</div><div class="line">为了验证google-perftools已经正常加载，可通过如下命令查看:</div><div class="line">lsof -n | grep tcmalloc</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h4 id="一、内存调优">一、内存调优</h4>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">内核关于内存的选项都在/proc/sys/vm目录下.</div><div class="line"><span class="number">1</span>.pdflush,用于回写内存中的脏数据到硬盘。可以通过 /proc/sys/vm/vm.dirty_background_ratio调整。</div><div class="line">首先查看这个值默认应该是<span class="number">10</span>。</div><div class="line">[root<span class="variable">@esf</span> ~]<span class="comment"># cat /proc/sys/vm/dirty_background_ratio</span></div><div class="line"><span class="number">10</span></div><div class="line">这个值是一个阀值,说明如果内存中的脏数据达到系统总内存的<span class="number">10</span>%时,那么pdflush进程就会启动,将内存中的脏数据写回硬盘.这个值可适当调高.可获得更快的写入速度.</div><div class="line"><span class="number">2</span>.swappiness选项</div><div class="line">[root<span class="variable">@esf</span> ~]<span class="comment"># cat /proc/sys/vm/swappiness</span></div><div class="line"><span class="number">60</span></div><div class="line">swappiness表示使用swap分区的使用程度,可以适当调整swappiness=<span class="number">0</span>的时候表示尽可能使用物理内存swap空间.swappiness=<span class="number">100</span>积极使用swap.</div><div class="line"><span class="number">3</span>.dirty_ratio</div><div class="line">[root<span class="variable">@esf</span> ~]<span class="comment"># cat /proc/sys/vm/dirty_ratio</span></div><div class="line"><span class="number">40</span></div><div class="line">dirty_ratio的值是数据写进内存的阀值,<span class="number">40</span>%是指当系统内存已经缓存了<span class="number">40</span>%的数据以后,就不再往内存中缓存数据了.</div></pre></td></tr></table></figure>

<p>]]>
    
    </summary>
    
      <category term="Nginx" scheme="http://cloudbps.com/categories/Nginx/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Cloudstack 4.2.1+vMware Hypervisor 重装]]></title>
    <link href="http://cloudbps.com/2014/06/08/cloudstack_zone/"/>
    <id>http://cloudbps.com/2014/06/08/cloudstack_zone/</id>
    <published>2014-06-08T04:10:00.000Z</published>
    <updated>2015-01-10T08:28:56.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li>现在我们需要重新部署一遍CloudStack,就是删除所有的数据,因为删除的时候出现了很多错误.<br><a id="more"></a><ul>
<li>禁用区域,通过CloudStack-ui删除所有的虚拟机(业务+系统+vRoute)</li>
<li>删除注册的模板</li>
<li>删除数据库</li>
<li>通过vsphere登录到vcenter中删除对应的主存储中的所有数据</li>
<li>查看虚拟机和模板是否有未删除的模板,如果未删除的系统模板,重新初始化的时候会提示找不到模板文件.</li>
<li>删除主机对应的虚拟网络中的网卡配置接口</li>
<li>修改数据中心cloud.zone 为flase,如果不修改,第二次添加的时候会提示该数据中心已被添加</li>
</ul>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li>现在我们需要重新部署一遍CloudStack,就是删除所有的数据,因为删除的时候出现了很多错误.<br>]]>
    
    </summary>
    
      <category term="CloudStack" scheme="http://cloudbps.com/categories/CloudStack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[vMware模板重封装]]></title>
    <link href="http://cloudbps.com/2014/06/08/cloudstack_ova/"/>
    <id>http://cloudbps.com/2014/06/08/cloudstack_ova/</id>
    <published>2014-06-08T03:30:00.000Z</published>
    <updated>2015-01-10T08:28:57.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li>现在需要从vMware原生平台迁入vm到CloudStack 4.2.1中,我这边只拿到了ova的模板,为了验证模板中的硬件配置是否符合CloudStack要求(1.导出时取消所有usb设备连接 2.保证cd/dvd的连接是当前客户端设备 3.顺便看下scsi控制器的格式).<a id="more"></a></li>
<li>如果发现ova模板不符合规格,可参考以下两种方法.<ul>
<li>通过本地vMware原生平台部署该模板为虚拟机,移除相关的外置设备,重新导出为ova模板</li>
<li>由于ova的模板是一个 gzip的压缩包,我们可以解压此文件,</li>
</ul>
</li>
</ol>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">##查看文件类型</span></div><div class="line">   <span class="constant">LT</span> import <span class="comment"># file tchost_import_.ova </span></div><div class="line">tchost_import<span class="number">_</span>.<span class="symbol">ova:</span> gzip compressed data, from <span class="constant">Unix</span>, last <span class="symbol">modified:</span> <span class="constant">Wed</span> <span class="constant">May</span>  <span class="number">7</span> <span class="number">10</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">54</span> <span class="number">2014</span></div><div class="line">   <span class="comment">##解包ova文件</span></div><div class="line"><span class="constant">LT</span> import <span class="comment"># tar xfz tchost_import_.ova</span></div><div class="line"><span class="comment">##查看解压后的文件</span></div><div class="line">   <span class="constant">LT</span> import <span class="comment"># ls</span></div><div class="line">tchost_import<span class="number">_</span>.ova  tchost_import_ovf_8-disk1.vmdk  tchost_import_ovf_8.mf  	tchost_import_ovf_8.ovf</div></pre></td></tr></table></figure>

<pre><code>   -<span class="ruby">  .vmdk 磁盘文件
</span>   -<span class="ruby">  .mf   存放vmdk 和ovf的 sha1校验信息
</span>   -<span class="ruby">  .ovf  存储该虚拟机的配置信息
</span>        -<span class="ruby">  这时我们就需要修改这个文件了,不知道修改什么位置的可以参考一个正常ova模板的.ovf文件</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li>现在需要从vMware原生平台迁入vm到CloudStack 4.2.1中,我这边只拿到了ova的模板,为了验证模板中的硬件配置是否符合CloudStack要求(1.导出时取消所有usb设备连接 2.保证cd/dvd的连接是当前客户端设备 3.顺便看下scsi控制器的格式).]]>
    
    </summary>
    
      <category term="CloudStack" scheme="http://cloudbps.com/categories/CloudStack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu 14.04 server 安装 ansible 抛出异常]]></title>
    <link href="http://cloudbps.com/2014/05/09/ansible_ubuntu1404error/"/>
    <id>http://cloudbps.com/2014/05/09/ansible_ubuntu1404error/</id>
    <published>2014-05-09T07:50:00.000Z</published>
    <updated>2015-01-10T08:25:00.000Z</updated>
    <content type="html"><![CDATA[<p>一.抛出log信息</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Command /usr/bin/python -c <span class="string">"import setuptools, tokenize;__file__='/tmp/pip_build_root/pycrypto/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))"</span> install --record /tmp/pip-Ii3Ksu-record/install-record.txt --single-version-externally-managed --compile failed <span class="keyword">with</span> error code <span class="number">1</span> <span class="keyword">in</span> /tmp/pip_build_root/pycrypto</div><div class="line">Storing debug log <span class="keyword">for</span> failure <span class="keyword">in</span> /root/.pip/pip.log</div></pre></td></tr></table></figure>

<p>解决办法:<br>   安装这个软件包即可:<br>    <code>apt-get install python-dev</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一.抛出log信息</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre]]>
    </summary>
    
      <category term="Ansible" scheme="http://cloudbps.com/categories/Ansible/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python 通过网站search功能监控网站内容更新]]></title>
    <link href="http://cloudbps.com/2014/05/09/pythonmoitorweb/"/>
    <id>http://cloudbps.com/2014/05/09/pythonmoitorweb/</id>
    <published>2014-05-09T07:24:33.000Z</published>
    <updated>2015-01-10T08:30:47.000Z</updated>
    <content type="html"><![CDATA[<p>接到需求帮朋友监控一个信息网站,当该网站有相关的数据更新的时候发送信息到指定邮箱.<br>下面是相关的python脚本,用到了httplib, time , sys ,smtplib模块<br><a id="more"></a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding=utf8</span></div><div class="line"><span class="keyword">import</span> httplib, time</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> smtplib</div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)</div><div class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</div><div class="line">mailto_list=[<span class="string">'sendmail@126.com'</span>]</div><div class="line">mail_host=<span class="string">"smtp.sina.com"</span></div><div class="line">mail_user=<span class="string">"sendmailaccount"</span></div><div class="line">mail_pass=<span class="string">"sendmailpassword"</span></div><div class="line">mail_postfix=<span class="string">"sina.com"</span></div><div class="line">sec=<span class="number">60</span></div><div class="line">conn = httplib.HTTPConnection(<span class="string">"网站地址"</span>)</div><div class="line">conn.request(<span class="string">"GET"</span>, <span class="string">"搜索后的网站地址|/caigou/kw-%E6%B1%A1%E6%B0%B4%E5%A4%84%E7%90%86%E6%8B%9B%E6%A0%87.html"</span>) </div><div class="line">r1 = conn.getresponse()</div><div class="line">a = r1.read()</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_mail</span><span class="params">(to_list,sub,content)</span>:</span></div><div class="line">    me=<span class="string">"网站信息已更新"</span>+<span class="string">"&lt;"</span>+mail_user+<span class="string">"@"</span>+mail_postfix+<span class="string">"&gt;"</span></div><div class="line">    msg = MIMEText(content,_subtype=<span class="string">'html'</span>,_charset=<span class="string">'utf8'</span>)</div><div class="line">    msg[<span class="string">'Subject'</span>] = sub</div><div class="line">    msg[<span class="string">'From'</span>] = me</div><div class="line">    msg[<span class="string">'To'</span>] = <span class="string">";"</span>.join(to_list)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        s = smtplib.SMTP()</div><div class="line">        s.connect(mail_host)</div><div class="line">        s.login(mail_user,mail_pass)</div><div class="line">        s.sendmail(me, to_list, msg.as_string())</div><div class="line">        s.close()</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">except</span> Exception, e:</div><div class="line">        <span class="keyword">print</span> str(e)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">"The program is starting"</span></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">	time.sleep( sec )</div><div class="line">	b = r1.read()</div><div class="line">	<span class="keyword">if</span> a == b:</div><div class="line">		<span class="keyword">print</span> <span class="string">'good running ,Now it is '</span> + time.strftime(<span class="string">'%Y年%m月%d日,%H:%M:%S'</span>)+ <span class="string">'\n请稍后.....'</span></div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		<span class="keyword">print</span> <span class="string">"网站更新"</span></div><div class="line">		<span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">			<span class="keyword">if</span> send_mail(mailto_list, <span class="string">"网站信息已更新"</span>, <span class="string">"对应网站域名"</span>):</div><div class="line">        			<span class="keyword">print</span> <span class="string">"发送成功"</span></div><div class="line">    			<span class="keyword">else</span>:</div><div class="line">        			<span class="keyword">print</span> <span class="string">"发送失败"</span></div><div class="line">		a = r1.read()</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>接到需求帮朋友监控一个信息网站,当该网站有相关的数据更新的时候发送信息到指定邮箱.<br>下面是相关的python脚本,用到了httplib, time , sys ,smtplib模块<br>]]>
    
    </summary>
    
      <category term="Python" scheme="http://cloudbps.com/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Cloudstack 4.2.1 vmware hypervisor 删除主存储]]></title>
    <link href="http://cloudbps.com/2014/05/07/clouddelpri/"/>
    <id>http://cloudbps.com/2014/05/07/clouddelpri/</id>
    <published>2014-05-07T14:23:33.000Z</published>
    <updated>2015-01-10T08:28:56.000Z</updated>
    <content type="html"><![CDATA[<p>由于线上的主存储容量比较大,剩余很多空间,现在需要更换一个小容量的主存储.</p>
<p>思路:<br>1.添加新的存储到CS平台,迁移原存储中的卷到新的存储中<br>2.由于二级存储也在上面,所有在迁移二级存储的时候需要禁用ZONE<br>3.迁移数据卷完成后,把原存储置为维护模式然后删除主存储<br><a id="more"></a><br>碰到的问题:<br>    1.原有存储中的硬盘文件成功迁移到新的存储中了,但是虚拟机的配置信息还在原有的存储中.只是把数据文件迁移了.</p>
<p>解决思路:<br>    1.备份重要的数据文件在原有的主存储中,销毁主存储中所有的虚拟机,把原有的主存储置为维护模式,移除主存储.<br>    2.如果主存储中有相关的模板信息,需要记下模板的名称,通过vc点击<code>虚拟机和模板</code>,从硬盘删除对应的模板文件</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>由于线上的主存储容量比较大,剩余很多空间,现在需要更换一个小容量的主存储.</p>
<p>思路:<br>1.添加新的存储到CS平台,迁移原存储中的卷到新的存储中<br>2.由于二级存储也在上面,所有在迁移二级存储的时候需要禁用ZONE<br>3.迁移数据卷完成后,把原存储置为维护模式然后删除主存储<br>]]>
    
    </summary>
    
      <category term="CloudStack" scheme="http://cloudbps.com/categories/CloudStack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Cloudstack 4.2.1 session保持]]></title>
    <link href="http://cloudbps.com/2014/05/05/cloudsession/"/>
    <id>http://cloudbps.com/2014/05/05/cloudsession/</id>
    <published>2014-05-05T11:23:33.000Z</published>
    <updated>2015-01-10T08:28:57.000Z</updated>
    <content type="html"><![CDATA[<p>由于CloudStack的保持时间很短,当我们登录到CloudStack-wei-ui后,默认30min内没有操作可以会与服务器断开,这时我们就需要重新登录,为了延长session的保持时间我们需要修改/etc/CloudStack/managerment/web.xml这个配置文件 481行,之前的值是30min我们可以改为1440<br>min(一天),然后需要重新启动CloudStack-managerment服务就可以了.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">480     &lt;session-config&gt;</div><div class="line">481         &lt;session-timeout&gt;1440&lt;/session-timeout&gt;</div><div class="line">482     &lt;/session-config&gt;</div><div class="line">483</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>由于CloudStack的保持时间很短,当我们登录到CloudStack-wei-ui后,默认30min内没有操作可以会与服务器断开,这时我们就需要重新登录,为了延长session的保持时间我们需要修改/etc/CloudStack/managerment/web.xml这]]>
    </summary>
    
      <category term="CloudStack" scheme="http://cloudbps.com/categories/CloudStack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Cloudstack 4.2.0 update 4.2.1 故障报告]]></title>
    <link href="http://cloudbps.com/2014/05/04/cloudupdate/"/>
    <id>http://cloudbps.com/2014/05/04/cloudupdate/</id>
    <published>2014-05-04T14:44:33.000Z</published>
    <updated>2015-01-10T08:28:57.000Z</updated>
    <content type="html"><![CDATA[<p>为了解决4.2.0的bug，现在需要升级到4.2.1<br>我当前的环境是两个NODE，为了安全期间，先从一台NODE下手,升级正常后在升级另一个NODE<br>升级步骤：</p>
<ol>
<li>备份数据库</li>
<li>停止NODE2的 CloudStack-managerment、CloudStack-usage服务</li>
<li>配置4.2.1的yum，通过yum升级4.2.0到4.2.1</li>
<li>启动CloudStack-management、CloudStack-usage服务</li>
<li>由于我们当前用的是vmware hypervisor，用的是高级网络，当启动管理端的时候有的端口组会漏刷，这时需要人工检查相关的VLAN-ID.</li>
<li>等带数分钟后，通过log查看managerment是否启动，正常启动后，登录WEB-UI登录验证版本信息.</li>
<li>创建Test vm测试服务可用性<br><a id="more"></a><ul>
<li>问题来了发现无法创建虚机,查看log抛出下面的异常。</li>
</ul>
</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line">    <span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">32</span>,<span class="number">830</span> <span class="constant">DEBUG </span>[cloud.storage.<span class="constant">StorageManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Checking </span>pool <span class="number">24</span> <span class="keyword">for</span> storage, <span class="symbol">totalSize:</span> <span class="number">1998770405376</span>, <span class="symbol">usedBytes:</span> <span class="number">96927219712</span>, <span class="symbol">usedPct:</span> <span class="number">0</span>.<span class="number">04</span>8493423482406664, disable <span class="symbol">threshold:</span> <span class="number">0</span>.<span class="number">85</span></div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">32</span>,<span class="number">854</span> <span class="constant">DEBUG </span>[cloud.storage.<span class="constant">StorageManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Checking </span><span class="symbol">pool:</span> <span class="number">24</span> <span class="keyword">for</span> volume allocation [<span class="constant">Vol[</span><span class="number">791</span>|vm=<span class="number">469</span>|<span class="constant">ROOT]</span>], maxSize <span class="symbol">:</span> <span class="number">7995081621504</span>, totalAllocatedSize <span class="symbol">:</span> <span class="number">2269890215936</span>, askingSize <span class="symbol">:</span> <span class="number">21474836480</span>, allocated disable <span class="symbol">threshold:</span> <span class="number">0</span>.<span class="number">85</span></div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">32</span>,<span class="number">857</span> <span class="constant">DEBUG </span>[storage.allocator.<span class="constant">AbstractStoragePoolAllocator]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Checking </span>if storage pool is suitable, <span class="symbol">name:</span> null ,<span class="symbol">poolId:</span> <span class="number">25</span></div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">32</span>,<span class="number">867</span> <span class="constant">DEBUG </span>[cloud.storage.<span class="constant">StorageManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Checking </span>pool <span class="number">25</span> <span class="keyword">for</span> storage, <span class="symbol">totalSize:</span> <span class="number">1998770405376</span>, <span class="symbol">usedBytes:</span> <span class="number">160569491456</span>, <span class="symbol">usedPct:</span> <span class="number">0</span>.08033413493822186, disable <span class="symbol">threshold:</span> <span class="number">0</span>.<span class="number">85</span></div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">32</span>,<span class="number">892</span> <span class="constant">DEBUG </span>[cloud.storage.<span class="constant">StorageManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Checking </span><span class="symbol">pool:</span> <span class="number">25</span> <span class="keyword">for</span> volume allocation [<span class="constant">Vol[</span><span class="number">791</span>|vm=<span class="number">469</span>|<span class="constant">ROOT]</span>], maxSize <span class="symbol">:</span> <span class="number">7995081621504</span>, totalAllocatedSize <span class="symbol">:</span> <span class="number">1245540515840</span>, askingSize <span class="symbol">:</span> <span class="number">21474836480</span>, allocated disable <span class="symbol">threshold:</span> <span class="number">0</span>.<span class="number">85</span></div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">32</span>,<span class="number">894</span> <span class="constant">DEBUG </span>[storage.allocator.<span class="constant">AbstractStoragePoolAllocator]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Checking </span>if storage pool is suitable, <span class="symbol">name:</span> null ,<span class="symbol">poolId:</span> <span class="number">26</span></div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">32</span>,<span class="number">904</span> <span class="constant">DEBUG </span>[cloud.storage.<span class="constant">StorageManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Checking </span>pool <span class="number">26</span> <span class="keyword">for</span> storage, <span class="symbol">totalSize:</span> <span class="number">2004407549952</span>, <span class="symbol">usedBytes:</span> <span class="number">88187338752</span>, <span class="symbol">usedPct:</span> <span class="number">0</span>.<span class="number">043</span>99671052631579, disable <span class="symbol">threshold:</span> <span class="number">0</span>.<span class="number">85</span></div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">32</span>,<span class="number">928</span> <span class="constant">DEBUG </span>[cloud.storage.<span class="constant">StorageManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Checking </span><span class="symbol">pool:</span> <span class="number">26</span> <span class="keyword">for</span> volume allocation [<span class="constant">Vol[</span><span class="number">791</span>|vm=<span class="number">469</span>|<span class="constant">ROOT]</span>], maxSize <span class="symbol">:</span> <span class="number">8017630199808</span>, totalAllocatedSize <span class="symbol">:</span> <span class="number">4563402752000</span>, askingSize <span class="symbol">:</span> <span class="number">21474836480</span>, allocated disable <span class="symbol">threshold:</span> <span class="number">0</span>.<span class="number">85</span></div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">32</span>,<span class="number">928</span> <span class="constant">DEBUG </span>[storage.allocator.<span class="constant">ClusterScopeStoragePoolAllocator]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">ClusterScopeStoragePoolAllocator </span>returning <span class="number">7</span> suitable storage pools</div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">32</span>,<span class="number">928</span> <span class="constant">DEBUG </span>[cloud.deploy.<span class="constant">DeploymentPlanningManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Trying </span>to find a potenial host <span class="keyword">and</span> associated storage pools from the suitable host/pool lists <span class="keyword">for</span> this <span class="constant">VM</span></div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">32</span>,<span class="number">928</span> <span class="constant">DEBUG </span>[cloud.deploy.<span class="constant">DeploymentPlanningManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Checking </span>if <span class="symbol">host:</span> <span class="number">12</span> can access any suitable storage pool <span class="keyword">for</span> <span class="symbol">volume:</span> <span class="constant">ROOT</span></div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">32</span>,<span class="number">931</span> <span class="constant">DEBUG </span>[cloud.deploy.<span class="constant">DeploymentPlanningManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Host:</span> <span class="number">12</span> can access <span class="symbol">pool:</span> <span class="number">25</span></div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">32</span>,<span class="number">934</span> <span class="constant">DEBUG </span>[cloud.deploy.<span class="constant">DeploymentPlanningManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Found </span>a potential host <span class="symbol">id:</span> <span class="number">12</span> <span class="symbol">name:</span> <span class="number">172.30</span>.<span class="number">22.100</span> <span class="keyword">and</span> associated storage pools <span class="keyword">for</span> this <span class="constant">VM</span></div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">32</span>,<span class="number">936</span> <span class="constant">DEBUG </span>[cloud.deploy.<span class="constant">DeploymentPlanningManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Returning Deployment Destination:</span> <span class="constant">Dest[Zone(Id)</span>-<span class="constant">Pod(Id)</span>-<span class="constant">Cluster(Id)</span>-<span class="constant">Host(Id)</span>-<span class="constant">Storage(Volume(Id|Type-</span>-&gt;<span class="constant">Pool(Id)</span>)] <span class="symbol">:</span> <span class="constant">Dest[Zone(</span><span class="number">1</span>)-<span class="constant">Pod(</span><span class="number">1</span>)-<span class="constant">Cluster(</span><span class="number">3</span>)-<span class="constant">Host(</span><span class="number">12</span>)-<span class="constant">Storage(Volume(</span><span class="number">791</span>|<span class="constant">ROOT-</span>-&gt;<span class="constant">Pool(</span><span class="number">25</span>))]</div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">32</span>,<span class="number">936</span> <span class="constant">DEBUG </span>[cloud.vm.<span class="constant">VirtualMachineManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Deployment </span>found  - <span class="constant">P0=VM[User|Qiao_ICPUpdate_Test05]</span>, <span class="constant">P0=Dest[Zone(Id)</span>-<span class="constant">Pod(Id)</span>-<span class="constant">Cluster(Id)</span>-<span class="constant">Host(Id)</span>-<span class="constant">Storage(Volume(Id|Type-</span>-&gt;<span class="constant">Pool(Id)</span>)] <span class="symbol">:</span> <span class="constant">Dest[Zone(</span><span class="number">1</span>)-<span class="constant">Pod(</span><span class="number">1</span>)-<span class="constant">Cluster(</span><span class="number">3</span>)-<span class="constant">Host(</span><span class="number">12</span>)-<span class="constant">Storage(Volume(</span><span class="number">791</span>|<span class="constant">ROOT-</span>-&gt;<span class="constant">Pool(</span><span class="number">25</span>))]</div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">33</span>,<span class="number">067</span> <span class="constant">DEBUG </span>[cloud.capacity.<span class="constant">CapacityManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">VM </span>state transitted from <span class="symbol">:Starting</span> to <span class="constant">Starting </span>with <span class="symbol">event:</span> <span class="constant">OperationRetryvm'</span>s original host <span class="symbol">id:</span> null new host <span class="symbol">id:</span> <span class="number">12</span> host id before state <span class="symbol">transition:</span> null</div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">33</span>,088 <span class="constant">DEBUG </span>[cloud.capacity.<span class="constant">CapacityManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Hosts'</span>s actual total <span class="constant">CPU:</span> <span class="number">128000</span> <span class="keyword">and</span> <span class="constant">CPU </span>after applying <span class="symbol">overprovisioning:</span> <span class="number">2560000</span></div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">33</span>,089 <span class="constant">DEBUG </span>[cloud.capacity.<span class="constant">CapacityManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">We </span>are allocating <span class="constant">VM,</span> increasing the used capacity of this <span class="symbol">host:</span><span class="number">12</span></div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">33</span>,089 <span class="constant">DEBUG </span>[cloud.capacity.<span class="constant">CapacityManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Current Used CPU:</span> <span class="number">216000</span> , <span class="constant">Free CPU:</span><span class="number">2344000</span> ,<span class="constant">Requested CPU:</span> <span class="number">4000</span></div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">33</span>,089 <span class="constant">DEBUG </span>[cloud.capacity.<span class="constant">CapacityManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Current Used RAM:</span> <span class="number">345744867328</span> , <span class="constant">Free RAM:</span><span class="number">10649178472448</span> ,<span class="constant">Requested RAM:</span> <span class="number">8589934592</span></div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">33</span>,089 <span class="constant">DEBUG </span>[cloud.capacity.<span class="constant">CapacityManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">CPU STATS </span>after <span class="symbol">allocation:</span> <span class="keyword">for</span> <span class="symbol">host:</span> <span class="number">12</span>, old <span class="symbol">used:</span> <span class="number">216000</span>, old <span class="symbol">reserved:</span> <span class="number">0</span>, actual <span class="symbol">total:</span> <span class="number">128000</span>, total with <span class="symbol">overprovisioning:</span> <span class="number">2560000</span>; new <span class="symbol">used:</span><span class="number">220000</span>, <span class="symbol">reserved:</span><span class="number">0</span>; requested <span class="symbol">cpu:</span><span class="number">4000</span>,<span class="symbol">alloc_from_last:</span><span class="keyword">false</span></div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">33</span>,089 <span class="constant">DEBUG </span>[cloud.capacity.<span class="constant">CapacityManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">RAM STATS </span>after <span class="symbol">allocation:</span> <span class="keyword">for</span> <span class="symbol">host:</span> <span class="number">12</span>, old <span class="symbol">used:</span> <span class="number">345744867328</span>, old <span class="symbol">reserved:</span> <span class="number">0</span>, <span class="symbol">total:</span> <span class="number">10994923339776</span>; new <span class="symbol">used:</span> <span class="number">354334801920</span>, <span class="symbol">reserved:</span> <span class="number">0</span>; requested <span class="symbol">mem:</span> <span class="number">8589934592</span>,<span class="symbol">alloc_from_last:</span><span class="keyword">false</span></div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">33</span>,<span class="number">102</span> <span class="constant">DEBUG </span>[cloud.vm.<span class="constant">VirtualMachineManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">VM </span>is being created <span class="keyword">in</span> <span class="symbol">podId:</span> <span class="number">1</span></div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">33</span>,<span class="number">121</span> <span class="constant">DEBUG </span>[cloud.network.<span class="constant">NetworkManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Network </span>id=<span class="number">213</span> is already implemented</div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">33</span>,<span class="number">141</span> <span class="constant">DEBUG </span>[cloud.network.<span class="constant">NetworkModelImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Service SecurityGroup </span>is <span class="keyword">not</span> supported <span class="keyword">in</span> the network id=<span class="number">213</span></div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">33</span>,<span class="number">148</span> <span class="constant">DEBUG </span>[cloud.network.<span class="constant">NetworkManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Changing </span>active number of nics <span class="keyword">for</span> network id=<span class="number">213</span> on <span class="number">1</span></div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">33</span>,<span class="number">166</span> <span class="constant">DEBUG </span>[cloud.network.<span class="constant">NetworkManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Asking VirtualRouter </span>to prepare <span class="keyword">for</span> <span class="constant">Nic[</span><span class="number">590</span>-<span class="number">469</span>-null-<span class="number">172.30</span>.<span class="number">51.96</span>]</div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">33</span>,<span class="number">199</span> <span class="constant">DEBUG </span>[network.router.<span class="constant">VirtualNetworkApplianceManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Lock </span>is acquired <span class="keyword">for</span> network id <span class="number">213</span> as a part of router startup <span class="keyword">in</span> <span class="constant">Dest[Zone(Id)</span>-<span class="constant">Pod(Id)</span>-<span class="constant">Cluster(Id)</span>-<span class="constant">Host(Id)</span>-<span class="constant">Storage(Volume(Id|Type-</span>-&gt;<span class="constant">Pool(Id)</span>)] <span class="symbol">:</span> <span class="constant">Dest[Zone(</span><span class="number">1</span>)-<span class="constant">Pod(</span><span class="number">1</span>)-<span class="constant">Cluster(</span><span class="number">3</span>)-<span class="constant">Host(</span><span class="number">12</span>)-<span class="constant">Storage(Volume(</span><span class="number">791</span>|<span class="constant">ROOT-</span>-&gt;<span class="constant">Pool(</span><span class="number">25</span>))]</div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">33</span>,<span class="number">229</span> <span class="constant">DEBUG </span>[network.router.<span class="constant">VirtualNetworkApplianceManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Lock </span>is released <span class="keyword">for</span> network id <span class="number">213</span> as a part of router startup <span class="keyword">in</span> <span class="constant">Dest[Zone(Id)</span>-<span class="constant">Pod(Id)</span>-<span class="constant">Cluster(Id)</span>-<span class="constant">Host(Id)</span>-<span class="constant">Storage(Volume(Id|Type-</span>-&gt;<span class="constant">Pool(Id)</span>)] <span class="symbol">:</span> <span class="constant">Dest[Zone(</span><span class="number">1</span>)-<span class="constant">Pod(</span><span class="number">1</span>)-<span class="constant">Cluster(</span><span class="number">3</span>)-<span class="constant">Host(</span><span class="number">12</span>)-<span class="constant">Storage(Volume(</span><span class="number">791</span>|<span class="constant">ROOT-</span>-&gt;<span class="constant">Pool(</span><span class="number">25</span>))]</div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">33</span>,<span class="number">246</span> <span class="constant">DEBUG </span>[cloud.network.<span class="constant">NetworkModelImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Service SecurityGroup </span>is <span class="keyword">not</span> supported <span class="keyword">in</span> the network id=<span class="number">213</span></div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">33</span>,<span class="number">272</span> <span class="constant">DEBUG </span>[cloud.network.<span class="constant">NetworkModelImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Service SecurityGroup </span>is <span class="keyword">not</span> supported <span class="keyword">in</span> the network id=<span class="number">213</span></div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">33</span>,<span class="number">278</span> <span class="constant">DEBUG </span>[network.router.<span class="constant">VirtualNetworkApplianceManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Applying </span>dhcp entry <span class="keyword">in</span> network <span class="constant">Ntwk[</span><span class="number">213</span>|<span class="constant">Guest|</span><span class="number">7</span>]</div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">33</span>,<span class="number">317</span> <span class="constant">DEBUG </span>[agent.manager.<span class="constant">ClusteredAgentAttache]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Seq </span><span class="number">9</span>-<span class="number">1236337169</span><span class="symbol">:</span> <span class="constant">Forwarding Seq </span><span class="number">9</span>-<span class="number">1236337169</span><span class="symbol">:</span>  { <span class="constant">Cmd </span>, <span class="constant">MgmtId:</span> <span class="number">345050394595</span>, <span class="symbol">via:</span> <span class="number">9</span>, <span class="constant">Ver:</span> v1, <span class="constant">Flags:</span> <span class="number">100111</span>, [{<span class="string">"com.cloud.agent.api.routing.DhcpEntryCommand"</span><span class="symbol">:</span>{<span class="string">"vmMac"</span><span class="symbol">:<span class="string">"06:b2:d2:00:02:19"</span></span>,<span class="string">"vmIpAddress"</span><span class="symbol">:<span class="string">"172.30.51.96"</span></span>,<span class="string">"vmName"</span><span class="symbol">:<span class="string">"Qiao_ICPUpdate_Test05"</span></span>,<span class="string">"defaultRouter"</span><span class="symbol">:<span class="string">"172.30.51.254"</span></span>,<span class="string">"defaultDns"</span><span class="symbol">:<span class="string">"172.30.51.21"</span></span>,<span class="string">"duid"</span><span class="symbol">:<span class="string">"00:03:00:01:06:b2:d2:00:02:19"</span></span>,<span class="string">"isDefault"</span><span class="symbol">:true</span>,<span class="string">"executeInSequence"</span><span class="symbol">:true</span>,<span class="string">"accessDetails"</span><span class="symbol">:</span>{<span class="string">"router.guest.ip"</span><span class="symbol">:<span class="string">"172.30.51.21"</span></span>,<span class="string">"zone.network.type"</span><span class="symbol">:<span class="string">"Advanced"</span></span>,<span class="string">"router.name"</span><span class="symbol">:<span class="string">"r-163-VM"</span></span>,<span class="string">"router.ip"</span><span class="symbol">:<span class="string">"172.30.22.54"</span></span>},<span class="string">"wait"</span><span class="symbol">:</span><span class="number">0</span>}}] } to <span class="number">345050394596</span></div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">33</span>,<span class="number">648</span> <span class="constant">DEBUG </span>[agent.transport.<span class="constant">Request]</span> (<span class="constant">AgentManager-Handler-</span><span class="number">6</span><span class="symbol">:null</span>) <span class="constant">Seq </span><span class="number">9</span>-<span class="number">1236337169</span><span class="symbol">:</span> <span class="constant">Processing:</span>  { <span class="constant">Ans:</span> , <span class="constant">MgmtId:</span> <span class="number">345050394595</span>, <span class="symbol">via:</span> <span class="number">9</span>, <span class="constant">Ver:</span> v1, <span class="constant">Flags:</span> <span class="number">110</span>, [{<span class="string">"com.cloud.agent.api.Answer"</span><span class="symbol">:</span>{<span class="string">"result"</span><span class="symbol">:true</span>,<span class="string">"wait"</span><span class="symbol">:</span><span class="number">0</span>}}] }</div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">33</span>,<span class="number">649</span> <span class="constant">DEBUG </span>[agent.manager.<span class="constant">AgentAttache]</span> (<span class="constant">AgentManager-Handler-</span><span class="number">6</span><span class="symbol">:null</span>) <span class="constant">Seq </span><span class="number">9</span>-<span class="number">1236337169</span><span class="symbol">:</span> <span class="constant">No </span>more commands found</div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">33</span>,<span class="number">649</span> <span class="constant">DEBUG </span>[agent.transport.<span class="constant">Request]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Seq </span><span class="number">9</span>-<span class="number">1236337169</span><span class="symbol">:</span> <span class="constant">Received:</span>  { <span class="constant">Ans:</span> , <span class="constant">MgmtId:</span> <span class="number">345050394595</span>, <span class="symbol">via:</span> <span class="number">9</span>, <span class="constant">Ver:</span> v1, <span class="constant">Flags:</span> <span class="number">110</span>, { <span class="constant">Answer </span>} }</div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">33</span>,<span class="number">667</span> <span class="constant">DEBUG </span>[cloud.network.<span class="constant">NetworkModelImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Service SecurityGroup </span>is <span class="keyword">not</span> supported <span class="keyword">in</span> the network id=<span class="number">213</span></div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">33</span>,<span class="number">672</span> <span class="constant">DEBUG </span>[network.router.<span class="constant">VirtualNetworkApplianceManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Applying </span>userdata <span class="keyword">and</span> password entry <span class="keyword">in</span> network <span class="constant">Ntwk[</span><span class="number">213</span>|<span class="constant">Guest|</span><span class="number">7</span>]</div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">33</span>,<span class="number">709</span> <span class="constant">DEBUG </span>[agent.manager.<span class="constant">ClusteredAgentAttache]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Seq </span><span class="number">9</span>-<span class="number">1236337170</span><span class="symbol">:</span> <span class="constant">Forwarding Seq </span><span class="number">9</span>-<span class="number">1236337170</span><span class="symbol">:</span>  { <span class="constant">Cmd </span>, <span class="constant">MgmtId:</span> <span class="number">345050394595</span>, <span class="symbol">via:</span> <span class="number">9</span>, <span class="constant">Ver:</span> v1, <span class="constant">Flags:</span> <span class="number">100111</span>, [{<span class="string">"com.cloud.agent.api.routing.SavePasswordCommand"</span><span class="symbol">:</span>{<span class="string">"password"</span><span class="symbol">:<span class="string">"fnirq_cnffjbeq"</span></span>,<span class="string">"vmIpAddress"</span><span class="symbol">:<span class="string">"172.30.51.96"</span></span>,<span class="string">"vmName"</span><span class="symbol">:<span class="string">"Qiao_ICPUpdate_Test05"</span></span>,<span class="string">"executeInSequence"</span><span class="symbol">:true</span>,<span class="string">"accessDetails"</span><span class="symbol">:</span>{<span class="string">"router.guest.ip"</span><span class="symbol">:<span class="string">"172.30.51.21"</span></span>,<span class="string">"zone.network.type"</span><span class="symbol">:<span class="string">"Advanced"</span></span>,<span class="string">"router.ip"</span><span class="symbol">:<span class="string">"172.30.22.54"</span></span>,<span class="string">"router.name"</span><span class="symbol">:<span class="string">"r-163-VM"</span></span>},<span class="string">"wait"</span><span class="symbol">:</span><span class="number">0</span>}},{<span class="string">"com.cloud.agent.api.routing.VmDataCommand"</span><span class="symbol">:</span>{<span class="string">"vmIpAddress"</span><span class="symbol">:<span class="string">"172.30.51.96"</span></span>,<span class="string">"vmName"</span><span class="symbol">:<span class="string">"Qiao_ICPUpdate_Test05"</span></span>,<span class="string">"executeInSequence"</span><span class="symbol">:true</span>,<span class="string">"accessDetails"</span><span class="symbol">:</span>{<span class="string">"router.guest.ip"</span><span class="symbol">:<span class="string">"172.30.51.21"</span></span>,<span class="string">"zone.network.type"</span><span class="symbol">:<span class="string">"Advanced"</span></span>,<span class="string">"router.ip"</span><span class="symbol">:<span class="string">"172.30.22.54"</span></span>,<span class="string">"router.name"</span><span class="symbol">:<span class="string">"r-163-VM"</span></span>},<span class="string">"wait"</span><span class="symbol">:</span><span class="number">0</span>}}] } to <span class="number">345050394596</span></div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">34</span>,<span class="number">044</span> <span class="constant">DEBUG </span>[agent.transport.<span class="constant">Request]</span> (<span class="constant">AgentManager-Handler-</span><span class="number">2</span><span class="symbol">:null</span>) <span class="constant">Seq </span><span class="number">9</span>-<span class="number">1236337170</span><span class="symbol">:</span> <span class="constant">Processing:</span>  { <span class="constant">Ans:</span> , <span class="constant">MgmtId:</span> <span class="number">345050394595</span>, <span class="symbol">via:</span> <span class="number">9</span>, <span class="constant">Ver:</span> v1, <span class="constant">Flags:</span> <span class="number">110</span>, [{<span class="string">"com.cloud.agent.api.Answer"</span><span class="symbol">:</span>{<span class="string">"result"</span><span class="symbol">:false</span>,<span class="string">"details"</span><span class="symbol">:<span class="string">"SavePassword failed due to bash: /opt/cloud/bin/savepassword.sh: No such file or directory\n"</span></span>,<span class="string">"wait"</span><span class="symbol">:</span><span class="number">0</span>}}] }</div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">34</span>,<span class="number">044</span> <span class="constant">DEBUG </span>[agent.manager.<span class="constant">AgentAttache]</span> (<span class="constant">AgentManager-Handler-</span><span class="number">2</span><span class="symbol">:null</span>) <span class="constant">Seq </span><span class="number">9</span>-<span class="number">1236337170</span><span class="symbol">:</span> <span class="constant">No </span>more commands found</div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">34</span>,<span class="number">044</span> <span class="constant">DEBUG </span>[agent.transport.<span class="constant">Request]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Seq </span><span class="number">9</span>-<span class="number">1236337170</span><span class="symbol">:</span> <span class="constant">Received:</span>  { <span class="constant">Ans:</span> , <span class="constant">MgmtId:</span> <span class="number">345050394595</span>, <span class="symbol">via:</span> <span class="number">9</span>, <span class="constant">Ver:</span> v1, <span class="constant">Flags:</span> <span class="number">110</span>, { <span class="constant">Answer </span>} }</div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">34</span>,<span class="number">045</span> <span class="constant">INFO </span> [cloud.vm.<span class="constant">VirtualMachineManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Unable </span>to contact resource.</div><div class="line">com.cloud.exception.<span class="constant">ResourceUnavailableException:</span> <span class="constant">Resource </span>[<span class="constant">DataCenter:</span><span class="number">1</span>] is <span class="symbol">unreachable:</span> <span class="constant">Unable </span>to apply userdata <span class="keyword">and</span> password entry on router </div><div class="line">	at com.cloud.network.router.<span class="constant">VirtualNetworkApplianceManagerImpl.</span>applyRules(<span class="constant">VirtualNetworkApplianceManagerImpl.</span><span class="symbol">java:</span><span class="number">3828</span>)</div><div class="line">	at com.cloud.network.router.<span class="constant">VirtualNetworkApplianceManagerImpl.</span>applyUserData(<span class="constant">VirtualNetworkApplianceManagerImpl.</span><span class="symbol">java:</span><span class="number">3017</span>)</div><div class="line">	at com.cloud.network.element.<span class="constant">VirtualRouterElement.</span>addPasswordAndUserdata(<span class="constant">VirtualRouterElement.</span><span class="symbol">java:</span><span class="number">930</span>)</div><div class="line">	at com.cloud.network.<span class="constant">NetworkManagerImpl.</span>prepareElement(<span class="constant">NetworkManagerImpl.</span><span class="symbol">java:</span><span class="number">2085</span>)</div><div class="line">	at com.cloud.network.<span class="constant">NetworkManagerImpl.</span>prepareNic(<span class="constant">NetworkManagerImpl.</span><span class="symbol">java:</span><span class="number">2200</span>)</div><div class="line">	at com.cloud.network.<span class="constant">NetworkManagerImpl.</span>prepare(<span class="constant">NetworkManagerImpl.</span><span class="symbol">java:</span><span class="number">2136</span>)</div><div class="line">	at com.cloud.vm.<span class="constant">VirtualMachineManagerImpl.</span>advanceStart(<span class="constant">VirtualMachineManagerImpl.</span><span class="symbol">java:</span><span class="number">886</span>)</div><div class="line">	at com.cloud.vm.<span class="constant">VirtualMachineManagerImpl.</span>start(<span class="constant">VirtualMachineManagerImpl.</span><span class="symbol">java:</span><span class="number">577</span>)</div><div class="line">	at org.apache.<span class="constant">CloudStack.</span>engine.cloud.entity.api.<span class="constant">VMEntityManagerImpl.</span>deployVirtualMachine(<span class="constant">VMEntityManagerImpl.</span><span class="symbol">java:</span><span class="number">227</span>)</div><div class="line">	at org.apache.<span class="constant">CloudStack.</span>engine.cloud.entity.api.<span class="constant">VirtualMachineEntityImpl.</span>deploy(<span class="constant">VirtualMachineEntityImpl.</span><span class="symbol">java:</span><span class="number">209</span>)</div><div class="line">	at com.cloud.vm.<span class="constant">UserVmManagerImpl.</span>startVirtualMachine(<span class="constant">UserVmManagerImpl.</span><span class="symbol">java:</span><span class="number">3440</span>)</div><div class="line">	at com.cloud.vm.<span class="constant">UserVmManagerImpl.</span>startVirtualMachine(<span class="constant">UserVmManagerImpl.</span><span class="symbol">java:</span><span class="number">3000</span>)</div><div class="line">	at com.cloud.vm.<span class="constant">UserVmManagerImpl.</span>startVirtualMachine(<span class="constant">UserVmManagerImpl.</span><span class="symbol">java:</span><span class="number">2986</span>)</div><div class="line">	at com.cloud.utils.component.<span class="constant">ComponentInstantiationPostProcessor$InterceptorDispatcher.</span>intercept(<span class="constant">ComponentInstantiationPostProcessor.</span><span class="symbol">java:</span><span class="number">125</span>)</div><div class="line">	at org.apache.<span class="constant">CloudStack.</span>api.command.user.vm.<span class="constant">DeployVMCmd.</span>execute(<span class="constant">DeployVMCmd.</span><span class="symbol">java:</span><span class="number">420</span>)</div><div class="line">	at com.cloud.api.<span class="constant">ApiDispatcher.</span>dispatch(<span class="constant">ApiDispatcher.</span><span class="symbol">java:</span><span class="number">158</span>)</div><div class="line">	at com.cloud.async.<span class="constant">AsyncJobManagerImpl$</span><span class="number">1</span>.run(<span class="constant">AsyncJobManagerImpl.</span><span class="symbol">java:</span><span class="number">531</span>)</div><div class="line">	at java.util.concurrent.<span class="constant">Executors$RunnableAdapter.</span>call(<span class="constant">Executors.</span><span class="symbol">java:</span><span class="number">471</span>)</div><div class="line">	at java.util.concurrent.<span class="constant">FutureTask$Sync.</span>innerRun(<span class="constant">FutureTask.</span><span class="symbol">java:</span><span class="number">334</span>)</div><div class="line">	at java.util.concurrent.<span class="constant">FutureTask.</span>run(<span class="constant">FutureTask.</span><span class="symbol">java:</span><span class="number">166</span>)</div><div class="line">	at java.util.concurrent.<span class="constant">ThreadPoolExecutor.</span>runWorker(<span class="constant">ThreadPoolExecutor.</span><span class="symbol">java:</span><span class="number">1146</span>)</div><div class="line">	at java.util.concurrent.<span class="constant">ThreadPoolExecutor$Worker.</span>run(<span class="constant">ThreadPoolExecutor.</span><span class="symbol">java:</span><span class="number">615</span>)</div><div class="line">	at java.lang.<span class="constant">Thread.</span>run(<span class="constant">Thread.</span><span class="symbol">java:</span><span class="number">679</span>)</div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">34</span>,<span class="number">074</span> <span class="constant">DEBUG </span>[cloud.vm.<span class="constant">VirtualMachineManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Cleaning </span>up resources <span class="keyword">for</span> the vm <span class="constant">VM[User|Qiao_ICPUpdate_Test05]</span> <span class="keyword">in</span> <span class="constant">Starting </span>state</div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">34</span>,08<span class="number">0</span> <span class="constant">DEBUG </span>[agent.manager.<span class="constant">ClusteredAgentAttache]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Seq </span><span class="number">12</span>-<span class="number">571212319</span><span class="symbol">:</span> <span class="constant">Forwarding Seq </span><span class="number">12</span>-<span class="number">571212319</span><span class="symbol">:</span>  { <span class="constant">Cmd </span>, <span class="constant">MgmtId:</span> <span class="number">345050394595</span>, <span class="symbol">via:</span> <span class="number">12</span>, <span class="constant">Ver:</span> v1, <span class="constant">Flags:</span> <span class="number">100111</span>, [{<span class="string">"com.cloud.agent.api.StopCommand"</span><span class="symbol">:</span>{<span class="string">"isProxy"</span><span class="symbol">:false</span>,<span class="string">"executeInSequence"</span><span class="symbol">:true</span>,<span class="string">"vmName"</span><span class="symbol">:<span class="string">"i-2-469-VM"</span></span>,<span class="string">"wait"</span><span class="symbol">:</span><span class="number">0</span>}}] } to <span class="number">345050394596</span></div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">34</span>,<span class="number">129</span> <span class="constant">DEBUG </span>[agent.transport.<span class="constant">Request]</span> (<span class="constant">AgentManager-Handler-</span><span class="number">4</span><span class="symbol">:null</span>) <span class="constant">Seq </span><span class="number">12</span>-<span class="number">571212319</span><span class="symbol">:</span> <span class="constant">Processing:</span>  { <span class="constant">Ans:</span> , <span class="constant">MgmtId:</span> <span class="number">345050394595</span>, <span class="symbol">via:</span> <span class="number">12</span>, <span class="constant">Ver:</span> v1, <span class="constant">Flags:</span> <span class="number">110</span>, [{<span class="string">"com.cloud.agent.api.StopAnswer"</span><span class="symbol">:</span>{<span class="string">"result"</span><span class="symbol">:true</span>,<span class="string">"details"</span><span class="symbol">:<span class="string">"VM i-2-469-VM is no longer in vSphere"</span></span>,<span class="string">"wait"</span><span class="symbol">:</span><span class="number">0</span>}}] }</div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">34</span>,<span class="number">130</span> <span class="constant">DEBUG </span>[agent.manager.<span class="constant">AgentAttache]</span> (<span class="constant">AgentManager-Handler-</span><span class="number">4</span><span class="symbol">:null</span>) <span class="constant">Seq </span><span class="number">12</span>-<span class="number">571212319</span><span class="symbol">:</span> <span class="constant">No </span>more commands found</div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">34</span>,<span class="number">130</span> <span class="constant">DEBUG </span>[agent.transport.<span class="constant">Request]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Seq </span><span class="number">12</span>-<span class="number">571212319</span><span class="symbol">:</span> <span class="constant">Received:</span>  { <span class="constant">Ans:</span> , <span class="constant">MgmtId:</span> <span class="number">345050394595</span>, <span class="symbol">via:</span> <span class="number">12</span>, <span class="constant">Ver:</span> v1, <span class="constant">Flags:</span> <span class="number">110</span>, { <span class="constant">StopAnswer </span>} }</div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">34</span>,<span class="number">147</span> <span class="constant">DEBUG </span>[cloud.network.<span class="constant">NetworkManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Changing </span>active number of nics <span class="keyword">for</span> network id=<span class="number">213</span> on -<span class="number">1</span></div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">34</span>,<span class="number">158</span> <span class="constant">DEBUG </span>[cloud.vm.<span class="constant">VirtualMachineManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Successfully </span>released network resources <span class="keyword">for</span> the vm <span class="constant">VM[User|Qiao_ICPUpdate_Test05]</span></div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">34</span>,<span class="number">158</span> <span class="constant">DEBUG </span>[cloud.vm.<span class="constant">VirtualMachineManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Successfully </span>cleanued up resources <span class="keyword">for</span> the vm <span class="constant">VM[User|Qiao_ICPUpdate_Test05]</span> <span class="keyword">in</span> <span class="constant">Starting </span>state</div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">34</span>,<span class="number">180</span> <span class="constant">DEBUG </span>[cloud.deploy.<span class="constant">DeploymentPlanningManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Deploy </span>avoids <span class="symbol">pods:</span> [], <span class="symbol">clusters:</span> [], <span class="symbol">hosts:</span> [<span class="number">12</span>]</div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">34</span>,<span class="number">180</span> <span class="constant">DEBUG </span>[cloud.deploy.<span class="constant">DeploymentPlanningManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">DataCenter </span>id = <span class="string">'1'</span> provided is <span class="keyword">in</span> avoid set, <span class="constant">DeploymentPlanner </span>cannot allocate the <span class="constant">VM,</span> returning.</div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">34</span>,<span class="number">228</span> <span class="constant">DEBUG </span>[cloud.capacity.<span class="constant">CapacityManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">VM </span>state transitted from <span class="symbol">:Starting</span> to <span class="constant">Stopped </span>with <span class="symbol">event:</span> <span class="constant">OperationFailedvm'</span>s original host <span class="symbol">id:</span> null new host <span class="symbol">id:</span> null host id before state <span class="symbol">transition:</span> <span class="number">12</span></div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">34</span>,<span class="number">242</span> <span class="constant">DEBUG </span>[cloud.capacity.<span class="constant">CapacityManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Hosts'</span>s actual total <span class="constant">CPU:</span> <span class="number">128000</span> <span class="keyword">and</span> <span class="constant">CPU </span>after applying <span class="symbol">overprovisioning:</span> <span class="number">2560000</span></div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">34</span>,<span class="number">242</span> <span class="constant">DEBUG </span>[cloud.capacity.<span class="constant">CapacityManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Hosts'</span>s actual total <span class="constant">RAM:</span> <span class="number">549746139136</span> <span class="keyword">and</span> <span class="constant">RAM </span>after applying <span class="symbol">overprovisioning:</span> <span class="number">10994923339776</span></div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">34</span>,<span class="number">242</span> <span class="constant">DEBUG </span>[cloud.capacity.<span class="constant">CapacityManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) release cpu from <span class="symbol">host:</span> <span class="number">12</span>, old <span class="symbol">used:</span> <span class="number">220000</span>,<span class="symbol">reserved:</span> <span class="number">0</span>, actual <span class="symbol">total:</span> <span class="number">128000</span>, total with <span class="symbol">overprovisioning:</span> <span class="number">2560000</span>; new <span class="symbol">used:</span> <span class="number">216000</span>,<span class="symbol">reserved:</span><span class="number">0</span>; <span class="symbol">movedfromreserved:</span> <span class="keyword">false</span>,moveToReserveredfalse</div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">34</span>,<span class="number">242</span> <span class="constant">DEBUG </span>[cloud.capacity.<span class="constant">CapacityManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) release mem from <span class="symbol">host:</span> <span class="number">12</span>, old <span class="symbol">used:</span> <span class="number">354334801920</span>,<span class="symbol">reserved:</span> <span class="number">0</span>, <span class="symbol">total:</span> <span class="number">10994923339776</span>; new <span class="symbol">used:</span> <span class="number">345744867328</span>,<span class="symbol">reserved:</span><span class="number">0</span>; <span class="symbol">movedfromreserved:</span> <span class="keyword">false</span>,moveToReserveredfalse</div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">34</span>,<span class="number">303</span> <span class="constant">DEBUG </span>[cloud.capacity.<span class="constant">CapacityManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">VM </span>state transitted from <span class="symbol">:Stopped</span> to <span class="constant">Starting </span>with <span class="symbol">event:</span> <span class="constant">StartRequestedvm'</span>s original host <span class="symbol">id:</span> null new host <span class="symbol">id:</span> null host id before state <span class="symbol">transition:</span> null</div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">34</span>,<span class="number">303</span> <span class="constant">DEBUG </span>[cloud.vm.<span class="constant">VirtualMachineManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Successfully </span>transitioned to start state <span class="keyword">for</span> <span class="constant">VM[User|Qiao_ICPUpdate_Test05]</span> reservation id = <span class="number">4</span>dfbe3d9-<span class="number">9929</span>-<span class="number">4</span>d1b-<span class="number">9</span>fcf-dbcf5aedadee</div><div class="line"><span class="number">2014</span>-<span class="number">05</span>-<span class="number">04</span> <span class="number">20</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">34</span>,<span class="number">315</span> <span class="constant">DEBUG </span>[cloud.vm.<span class="constant">VirtualMachineManagerImpl]</span> (<span class="constant">Job-Executor-</span><span class="number">7</span><span class="symbol">:job-</span><span class="number">1915</span> = [ bf596afe-<span class="number">55</span>ed-<span class="number">45</span>ce-b6dd-<span class="number">8</span>da5ff1d2c78 ]) <span class="constant">Trying </span>to deploy <span class="constant">VM,</span> vm has <span class="symbol">dcId:</span> <span class="number">1</span> <span class="keyword">and</span> <span class="symbol">podId:</span> <span class="number">1</span></div></pre></td></tr></table></figure>

<p>根据log的输出,问题出在</p>
<pre><code><span class="tag">-</span> 2014<span class="tag">-05-04</span> 20<span class="pseudo">:09</span><span class="pseudo">:34</span>,044 <span class="tag">DEBUG</span> <span class="attr_selector">[agent.transport.Request]</span> (<span class="tag">AgentManager-Handler-2</span><span class="pseudo">:null)</span> <span class="tag">Seq</span> 9<span class="tag">-1236337170</span>: <span class="tag">Processing</span>:  <span class="rules">{ <span class="rule"><span class="attribute">Ans</span>:<span class="value"> , MgmtId: <span class="number">345050394595</span>, via: <span class="number">9</span>, Ver: v1, Flags: <span class="number">110</span>, [{<span class="string">"com.cloud.agent.api.Answer"</span>:{<span class="string">"result"</span>:false,<span class="string">"details"</span>:`<span class="string">"SavePassword failed due to bash: /opt/cloud/bin/savepassword.sh: No such file or directory\n"</span>,<span class="string">"wait"</span>:<span class="number">0</span></span></span></span>}}] }`
</code></pre><p>这时我们找到相关的虚拟路由器，登录到路由器中，查看/opt/cloud/bin目录下面是不是有此文件，发现没有，这是我们重启虚拟路由器（由于这个问题我也是刚碰到，所以我们需要找不是很重要的虚拟路由进行重启，重启的过程可能会重刷主机端口，这时要注意观察，等待虚拟路由重启成功后查看/opt/cloud/bin目录中是否有savepassword.sh这个文件，庆幸的是有这个文件，然后我们重建新部署虚拟机，部署成功）</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>为了解决4.2.0的bug，现在需要升级到4.2.1<br>我当前的环境是两个NODE，为了安全期间，先从一台NODE下手,升级正常后在升级另一个NODE<br>升级步骤：</p>
<ol>
<li>备份数据库</li>
<li>停止NODE2的 CloudStack-managerment、CloudStack-usage服务</li>
<li>配置4.2.1的yum，通过yum升级4.2.0到4.2.1</li>
<li>启动CloudStack-management、CloudStack-usage服务</li>
<li>由于我们当前用的是vmware hypervisor，用的是高级网络，当启动管理端的时候有的端口组会漏刷，这时需要人工检查相关的VLAN-ID.</li>
<li>等带数分钟后，通过log查看managerment是否启动，正常启动后，登录WEB-UI登录验证版本信息.</li>
<li>创建Test vm测试服务可用性<br>]]>
    
    </summary>
    
      <category term="CloudStack" scheme="http://cloudbps.com/categories/CloudStack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[运维常用shell]]></title>
    <link href="http://cloudbps.com/2014/05/03/shell_middle/"/>
    <id>http://cloudbps.com/2014/05/03/shell_middle/</id>
    <published>2014-05-03T14:16:33.000Z</published>
    <updated>2015-01-10T08:33:35.000Z</updated>
    <content type="html"><![CDATA[<p>1.显示消耗内存/CPU最多的10个进程<br><code>ps aux | sort -nk +4 | tail -10</code><br><code>ps aux | sort -nk +3 | tail -10</code></p>
<p>2.查看Apache的并发请求数及其TCP连接状态<br><code>netstat -n | awk &#39;/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}&#39;</code><br>另一种方法：<br><code>netstat -ant|awk &#39;/^tcp/ {print awk $NF}&#39;|sort|uniq -c|sort -nr</code><br><a id="more"></a></p>
<p>3.找出自己最常用的10条命令及使用次数（或求访问最多的ip数）<br><code>sed -e &#39;s/| //n/g&#39; ~/.bash_history |cut -d  &#39;&#39; -f 1 | sort | uniq -c | sort -nr | head</code></p>
<p>4.日志中第10个字段表示连接时间，求平均连接时间<br><code>cat access_log |grep “connect cbp” |awk` ‘BEGIN{sum=0;count=0;}{sum+=$10;count++;}END{printf(“sum=%d,count=%d,avg=%f/n”,sum,count,sum/count)}’</code></p>
<p>5.lsof命令</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">lsof</span> <span class="tag">abc</span><span class="class">.txt</span> 显示开启文件<span class="tag">abc</span><span class="class">.txt</span>的进程</div><div class="line"><span class="tag">lsof</span> <span class="tag">-i</span> <span class="pseudo">:22</span> 知道22端口现在运行什么程序</div><div class="line"><span class="tag">lsof</span> <span class="tag">-c</span> <span class="tag">abc</span> 显示<span class="tag">abc</span>进程现在打开的文件</div><div class="line"><span class="tag">lsof</span> <span class="tag">-p</span> 12  看进程号为12的进程打开了哪些文件</div></pre></td></tr></table></figure>

<p>6.杀掉一个程序的所有进程</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">pkill</span> -<span class="number">9</span> httpd</div><div class="line">killall -<span class="number">9</span> httpd</div></pre></td></tr></table></figure>

<p>注意尽量不用-9，数据库服务器上更不能轻易用kill，否则造成重要数据丢失后果将不堪设想。</p>
<p>7.rsync命令（要求只同步某天的压缩文件，而且远程目录保持与本地目录一致）</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/rsync -azvR –password-file=<span class="regexp">/etc/rsync</span>.secrets `find . -name “*<span class="variable">$yesterday</span>.gz”  -type f ` storage<span class="variable">@192</span>.<span class="number">168.2</span>.<span class="number">23</span><span class="symbol">:</span><span class="symbol">:logbackup/</span><span class="number">13.21</span>/</div></pre></td></tr></table></figure>

<p>8.把目录下<em>.sh文件改名为</em>.SH</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">find</span> .  -name <span class="string">"*.sh"</span> | sed  <span class="string">'s//(.*/)/.sh/mv /0 /1.SH/'</span> |<span class="keyword">sh</span></div><div class="line"><span class="keyword">find</span> .  -name <span class="string">"*.sh"</span> | sed  <span class="string">'s//(.*/)/.sh/mv & /1.SH/'</span>|<span class="keyword">sh</span>  （跟上面那个效果一样）</div></pre></td></tr></table></figure>


<p>9.ssh执行远程的程序，并在本地显示<br><code>ssh -n -l zouyunhao 192.168.2.14 &quot;ls -al /home/zouyunhao&quot;</code></p>
<ol>
<li>直接用命令行修改密码<br><code>echo &quot;zouyunhaoPassword&quot; |passwd –stdin zouyunhao</code></li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssh-keygen</div><div class="line">ssh-copy-id -i ~<span class="regexp">/.ssh/id</span>_rsa.pub user<span class="variable">@remoteServer</span></div></pre></td></tr></table></figure>


<p>11.以http方式共享当前文件夹的文件<br><code>$ python -m SimpleHTTPServer</code><br>在浏览器访问<a href="http://IP:8000/即可下载当前目录的文件。" target="_blank" rel="external">http://IP:8000/即可下载当前目录的文件。</a></p>
<p>12.shell段注释<br><code>:&lt;&lt;&#39;echo hello,world!&#39;</code></p>
<p>13.查看服务器序列号<br><code>dmidecode |grep &quot;Serial Number&quot;</code><br>（查看机器其他硬件信息也可用这个命令）</p>
<p>14.查看网卡是否有网线物理连接<br><strong>监控网卡变化</strong> <code>/sbin/mii-tool -m</code><br><strong>重启单独网卡</strong> <code>ifup eth* &amp;&amp; ifdown eth*</code></p>
<p>15、扫描开放端口<br><code>nmap 127.0.0.1 |grep -w 443  #-w精确匹配</code></p>
<p>下面我会陆续添加一些在实际工作中用到的其他不错的shell命令~~~<br>1、将大写文件名改为小写文件名<br><code>for i in `find ./ -type f -name &quot;[A-Z]*&quot;| xargs -0`; do mv -f $i `echo $i | tr A-Z a-z`; done</code></p>
<p>2、zat查看压缩文件<br><code>zcat install.log.tgz |grep -a ssh #过滤必须加上-a参数</code></p>
<p>3、杀掉程序所有进程，跟上面pkill功能一样<br><code>pgrep httpd|xargs kill -9 #pgrep过滤出进程号再kill</code></p>
<p>4、快速备份一个文件<br><code>cp filename{,.bak}  #filename{,.bak}</code> <strong>这一段会被展开成filename filename.bak再传给cp</strong></p>
<p>5、重命名文件：<br><code>ls|xargs -t -i mv {} {}.bak</code> <strong>所有文件添加.bak后缀</strong><br><code>ls |sed &#39;s/.bak$//&#39;|xargs -I {} mv {}.bak {}</code> <strong>去除所有文件.bak后缀，上一个命令的反向恢复</strong><br><code>for i in</code>ls<code>;do mv $i ${i%.*};done</code> <strong>同上,去除后缀名,利用变量模式匹配运算符</strong><br><code>find ./ -name &quot;*.py&quot; -exec mv {} {}.bak \;</code> <strong>将所有.py后缀文件，加上.bak后缀</strong><br><code>rename .sh .py *.sh</code> <strong>将所有.sh后缀重命名为.py</strong><br><code>for i in `ls *.sh`;do mv $i `echo $i|awk -F \. &#39;{print $1}&#39;`.py;done</code> <strong>同上</strong></p>
<p>6、tar包不解压统计大小：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">tar</span> tvf nrpe-<span class="number">2</span>.<span class="number">8</span>.<span class="number">1</span>.tar.gz | awk <span class="string">'{total+=<span class="variable">$3</span>}END{print total}'</span></div><div class="line">tar tvf nrpe-<span class="number">2</span>.<span class="number">8</span>.<span class="number">1</span>.tar.gz | awk <span class="string">'{total+=<span class="variable">$3</span>}END{print total/1024}'</span>  <span class="comment">#kb大小</span></div></pre></td></tr></table></figure>

<p>7、将两个文件交叉显示</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">paste a.txt b.txt|tr <span class="string">"\t"</span> <span class="string">"\n"</span></div><div class="line">paste a.txt b.txt|xargs -n1</div></pre></td></tr></table></figure>

<p>8、使用xargs分析单词出现的频率:<br><code>cat file.txt |xargs -n1|tr A-Z a-z|sed -e &#39;s/\.//g&#39; -e &#39;s/\,//g&#39; -e &#39;s/ /\n/g&#39;|sort|uniq -c|sort -nr</code><br>解释：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">xargs -n1:列出文件, 每行一个单词</div><div class="line">tr A-Z a-z:将字符转换为小写</div><div class="line">sed <span class="operator">-e</span> <span class="string">'s/\.//g'</span> <span class="operator">-e</span> <span class="string">'s/\,//g'</span> <span class="operator">-e</span> <span class="string">'s/ /\n/g'</span>: 过滤掉句号和逗号,单词间的空格修改为换行</div><div class="line">另一种空格转换行方法：直接使用换行符</div><div class="line"> <span class="string">'s/ /\      </span></div><div class="line">/g'</div><div class="line">sort|uniq -c|sort -nr:排序，计数，再排序</div></pre></td></tr></table></figure>

<p>不使用xargs统计：<br><code>sed -e &#39;s/\.//g&#39; -e &#39;s/\,//g&#39; -e &#39;s/ /\n/g&#39; README |tr &#39;A-Z&#39; &#39;a-z&#39;|sort|uniq -c|sort -nr</code></p>
<p>9、xargs拷贝文件到另一个目录中：</p>
<p><code>ls . | xargs -i -t cp ./{} /data/backup</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">t 是 <span class="string">"verbose"</span> (输出命令行到stderr) 选项.</div><div class="line"><span class="pp">-i 是"替换字符串"选项</span>.</div><div class="line"><span class="tuple">{}</span> 是输出文本的替换点.</div><div class="line">这与在<span class="string">"find"</span>命令中使用<span class="tuple">{}</span>的情况很相像.</div><div class="line">列出当前目录下的所有文件(ls .),将 <span class="string">"ls"</span> 的输出作为参数传递到 <span class="string">"xargs"</span>(-i -t 选项)中,然后拷贝(cp)这些参数(<span class="tuple">{}</span>)到一个新目录中(/data/backup).等价cp * /data/backup,除非有文件名中嵌入了<span class="string">"空白"</span>字符.</div></pre></td></tr></table></figure>

<p>10、利用xargs kill进程<br><code>ps ax | grep &quot;httpd&quot; | awk &#39;{print $1}&#39; | xargs -i kill {} 2&amp;&gt;/dev/null</code></p>
<p>11、重复字符序列中除去除第一个字符以外的所有字符，例如aaa,多个空格</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tr <span class="operator">-s</span> <span class="string">'a'</span> &lt;test.txt <span class="comment">#多个a连续，只保留第一个</span></div><div class="line">tr <span class="operator">-s</span> <span class="string">' '</span> &lt;test.txt <span class="comment">#字符间多个空格，只保留一个</span></div></pre></td></tr></table></figure>

<p>12、去除windows下换行符^M</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">tr -d <span class="string">"\r"</span> &lt;file.txt &gt;out.txt</div><div class="line">tr -d <span class="string">"\015"</span> &lt;file.txt &gt;out.txt <span class="comment">#^M八进制形式是 015</span></div><div class="line">strings file.txt &gt;out.txt</div><div class="line">sed -i <span class="string">'s/^M//g'</span> file.txt  <span class="comment">#^M不是shift+^再加上M,应该是ctrl+v加上ctrl+m</span></div><div class="line">vi文件下执行<span class="symbol">:%s/^M//g</span>替换为空</div><div class="line">dos2unix file.txt</div></pre></td></tr></table></figure>

<p>13、过滤文件内电子邮箱和网站地址<br>过滤邮箱(只显示过滤文本)：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#egrep -<span class="keyword">o</span> <span class="string">'[A-Za-z0-9.]+@[A-Za-z0-9.]+\.[a-zA-Z]{2,3}'</span> <span class="keyword">file</span>.txt</div><div class="line">zhangsan@sina.<span class="keyword">com</span></div><div class="line">lishi.<span class="number">123</span>@sohu.<span class="keyword">com</span></div></pre></td></tr></table></figure>

<p>过滤网站地址：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#egrep -o 'http:<span class="comment">//[A-Za-z0-9\-\.]+\.[a-zA-Z]{2,3}' file.txt</span></div><div class="line">http:<span class="comment">//code.nagios.google.com</span></div><div class="line">http:<span class="comment">//www.baidu.com</span></div></pre></td></tr></table></figure>

<p>过滤IP地址：<br><code>egrep -o &quot;[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+&quot; file.txt</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>1.显示消耗内存/CPU最多的10个进程<br><code>ps aux | sort -nk +4 | tail -10</code><br><code>ps aux | sort -nk +3 | tail -10</code></p>
<p>2.查看Apache的并发请求数及其TCP连接状态<br><code>netstat -n | awk &#39;/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}&#39;</code><br>另一种方法：<br><code>netstat -ant|awk &#39;/^tcp/ {print awk $NF}&#39;|sort|uniq -c|sort -nr</code><br>]]>
    
    </summary>
    
      <category term="Shell" scheme="http://cloudbps.com/categories/Shell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[China Ntp Server]]></title>
    <link href="http://cloudbps.com/2014/04/24/chinantp/"/>
    <id>http://cloudbps.com/2014/04/24/chinantp/</id>
    <published>2014-04-24T02:44:33.000Z</published>
    <updated>2015-01-10T08:31:02.000Z</updated>
    <content type="html"><![CDATA[<h4 id="China_Ntp_server">China Ntp server</h4>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">server <span class="number">0</span>.cn.pool.ntp.org</div><div class="line">server <span class="number">1</span>.asia.pool.ntp.org</div><div class="line">server <span class="number">3</span>.asia.pool.ntp.org</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h4 id="China_Ntp_server">China Ntp server</h4>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><]]>
    </summary>
    
      <category term="Linux Tools" scheme="http://cloudbps.com/categories/Linux-Tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Cloudstack 4.2.1-exsi5.1 添加主存储]]></title>
    <link href="http://cloudbps.com/2014/04/21/CloudAddPrimary/"/>
    <id>http://cloudbps.com/2014/04/21/CloudAddPrimary/</id>
    <published>2014-04-21T11:44:33.000Z</published>
    <updated>2015-01-10T08:28:56.000Z</updated>
    <content type="html"><![CDATA[<p>环境描述:</p>
<ol>
<li>主存储由于用的是NFS,在磁盘I/O上面有很大的瓶颈,读写速率只有56MB/s左右,创建一个windows需要花费15分钟左右,严重影响vm的创建,所以我们需要更换SAN的存储采用FC-FC的连接服务器-光纤交换机-存储.</li>
</ol>
<p>问题考虑:</p>
<ol>
<li>由于是上线前的测试,我们需要销毁所有的vm(系统vm+业务vm)</li>
<li>销毁业务vm好说,但是销毁系统VM的话系统在巡检周期内发现系统vm销毁,系统会自动重建,这样我们就无法保证系统vm能正常的创建到新添加的主存储中.<a id="more"></a>

</li>
</ol>
<p>操作方法:</p>
<ol>
<li>通过Vcenter-选定主机扫描存储(如果是一个集群有多台主机,单独对每个主机扫描),如果存储配置没有问题的话,会自动发现对应的存储,记住要使用的主存储的标签名字.</li>
<li>通过Cloudstack-ui添加主存储</li>
<li>禁用ZONE</li>
<li>销毁所有的业务vm</li>
<li>销毁所有的系统vm(secondary+proxy+route)</li>
<li>保证NFS主存储没有相关的vm数据,操作NFS的主存储进入维护模式,删除NFS主存储.</li>
<li>启动区域</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>环境描述:</p>
<ol>
<li>主存储由于用的是NFS,在磁盘I/O上面有很大的瓶颈,读写速率只有56MB/s左右,创建一个windows需要花费15分钟左右,严重影响vm的创建,所以我们需要更换SAN的存储采用FC-FC的连接服务器-光纤交换机-存储.</li>
</ol>
<p>问题考虑:</p>
<ol>
<li>由于是上线前的测试,我们需要销毁所有的vm(系统vm+业务vm)</li>
<li>销毁业务vm好说,但是销毁系统VM的话系统在巡检周期内发现系统vm销毁,系统会自动重建,这样我们就无法保证系统vm能正常的创建到新添加的主存储中.]]>
    
    </summary>
    
      <category term="CloudStack" scheme="http://cloudbps.com/categories/CloudStack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Cloudstack 4.2.1-模板注册问题]]></title>
    <link href="http://cloudbps.com/2014/04/17/cloud-templtate/"/>
    <id>http://cloudbps.com/2014/04/17/cloud-templtate/</id>
    <published>2014-04-16T16:00:00.000Z</published>
    <updated>2015-01-10T08:28:57.000Z</updated>
    <content type="html"><![CDATA[<p>1.当我们在高级网络(通过VLAN的方式隔离)中注册模板的时候可能会在模板注册的时候提示</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">状态<span class="symbol">:</span> connection refused</div><div class="line">      </div><div class="line">      碰到这个文件需要修改全局变量参数</div><div class="line">      	secstorage.allowed.internal.sites  在后面输入二级存储的<span class="constant">IP</span>就可以, xx.xx.xx.xx/<span class="number">32</span> 就可以了,如果只写<span class="constant">IP</span>地址是不可以的</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>1.当我们在高级网络(通过VLAN的方式隔离)中注册模板的时候可能会在模板注册的时候提示</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</d]]>
    </summary>
    
      <category term="CloudStack" scheme="http://cloudbps.com/categories/CloudStack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Cloudstack 4.2.1-二级存储+主存储网络中断.]]></title>
    <link href="http://cloudbps.com/2014/04/17/cloud-sec-proys/"/>
    <id>http://cloudbps.com/2014/04/17/cloud-sec-proys/</id>
    <published>2014-04-16T16:00:00.000Z</published>
    <updated>2015-01-10T08:25:14.000Z</updated>
    <content type="html"><![CDATA[<p>一.由于二级存储和主存储放在一起,下午突然网络中断可想而知后果的严重性了.系统vm全部read-only,无法挂在文件系统.解决思路</p>
<ul>
<li><p>1.1.当网络成功恢复后,登录UI查看功能vm的状态,如果都是Runing on的状态,那么就OK,如果不是那么.</p>
</li>
<li><p>1.2保证管理网络,计算节点网络可以访问存储服务器(可链接,可写入)</p>
</li>
<li><p>1.3.如果系统vm处于starting的状态了,这时可以登录vm查看功能vm的状态,如果系统vm已经read-only,那么直接修改数据库,把状态修改为Stopped,然后重启系统vm,先重启ssvm,如果ssvm还是无法启动,或者根本就无法发送命令,那么直接重启管理端,然后在销毁ssvm,让系统重建.重建完成后查看状态,一般就可以解决问题.</p>
</li>
<li><p>1.4.然后在来处理proxy的问题</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>一.由于二级存储和主存储放在一起,下午突然网络中断可想而知后果的严重性了.系统vm全部read-only,无法挂在文件系统.解决思路</p>
<ul>
<li><p>1.1.当网络成功恢复后,登录UI查看功能vm的状态,如果都是Runing on的状态,那么就OK,如果不是]]>
    </summary>
    
      <category term="CloudStack" scheme="http://cloudbps.com/categories/CloudStack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Cloudstack 4.2.1-无法创建vm]]></title>
    <link href="http://cloudbps.com/2014/03/13/cloudstack-error-across/"/>
    <id>http://cloudbps.com/2014/03/13/cloudstack-error-across/</id>
    <published>2014-03-13T15:49:33.000Z</published>
    <updated>2015-01-10T08:28:57.000Z</updated>
    <content type="html"><![CDATA[<p>1.今天创建vm,抛出以下异常<br>通过以下方法可以解决<br><a id="more"></a></p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div></pre></td><td class="code"><pre><div class="line">2014-03-13 16:15:31,228 DEBUG [cloud.storage.VolumeManagerImpl] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Checking if we need to prepare 2 volumes for VM[User|DSJAppServer01]</div><div class="line">2014-03-13 16:15:31,248 DEBUG [storage.image.TemplateDataFactoryImpl] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) template 290 is already in store:2, type:Image</div><div class="line">2014-03-13 16:15:31,274 DEBUG [storage.datastore.PrimaryDataStoreImpl] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Not found (templateId:290poolId:23) in template_spool_ref, persisting it</div><div class="line">2014-03-13 16:15:31,293 DEBUG [storage.image.TemplateDataFactoryImpl] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) template 290 is already in store:23, type:Primary</div><div class="line">2014-03-13 16:15:31,295 DEBUG [storage.volume.VolumeServiceImpl] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Found template 290-2-d3ccfe00-e08a-3a52-86f1-e19c4e26f2a7 in storage pool 23 with VMTemplateStoragePool id: 223</div><div class="line">2014-03-13 16:15:31,307 DEBUG [storage.volume.VolumeServiceImpl] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Acquire lock on VMTemplateStoragePool 223 with timeout 3600 seconds</div><div class="line">2014-03-13 16:15:31,314 INFO  [storage.volume.VolumeServiceImpl] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) lock is acquired for VMTemplateStoragePool 223</div><div class="line">2014-03-13 16:15:31,331 DEBUG [storage.motion.AncientDataMotionStrategy] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) copyAsync inspecting src type TEMPLATE copyAsync inspecting dest type TEMPLATE</div><div class="line">2014-03-13 16:15:31,375 DEBUG [agent.transport.Request] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Seq 18-1940796686: Sending  { Cmd , MgmtId: 345050394595, via: 18, Ver: v1, Flags: 100111, [{"org.apache.CloudStack.storage.command.CopyCommand":{"srcTO":{"org.apache.CloudStack.storage.to.TemplateObjectTO":{"path":"template/tmpl/2/290/60539132-19a1-3dfe-b425-fdb45fd9076d.ova","origUrl":"http://172.22.2.1/inspur/inspurcloud/customvm/win200864bitnopatch.ova","uuid":"d1da06af-6ae4-4d5f-80c6-a6a6fd373311","id":290,"format":"OVA","accountId":2,"checksum":"2c609d3019b0cadf5943793f4b8edd9f","hvm":true,"displayText":"win2008 64bit without patch","imageDataStore":{"com.cloud.agent.api.to.NfsTO":{"_url":"nfs://172.22.2.1/vg02data01/icp/ss01","_role":"Image"}},"name":"290-2-d3ccfe00-e08a-3a52-86f1-e19c4e26f2a7","hypervisorType":"VMware"}},"destTO":{"org.apache.CloudStack.storage.to.TemplateObjectTO":{"origUrl":"http://172.22.2.1/inspur/inspurcloud/customvm/win200864bitnopatch.ova","uuid":"d1da06af-6ae4-4d5f-80c6-a6a6fd373311","id":290,"format":"OVA","accountId":2,"checksum":"2c609d3019b0cadf5943793f4b8edd9f","hvm":true,"displayText":"win2008 64bit without patch","imageDataStore":{"org.apache.CloudStack.storage.to.PrimaryDataStoreTO":{"uuid":"841a5ebc-f2fc-3a18-84bb-92c06dd51318","id":23,"poolType":"VMFS","host":"VMFS datastore: /INSPURXCICP/DSJ01-R02-V01","path":"/INSPURXCICP/DSJ01-R02-V01","port":0}},"name":"290-2-d3ccfe00-e08a-3a52-86f1-e19c4e26f2a7","hypervisorType":"VMware"}},"executeInSequence":true,"wait":10800}}] }</div><div class="line">2014-03-13 16:15:31,375 INFO  [agent.manager.AgentAttache] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Seq 18-1940796686: Unable to send due to Resource [Host:18] is unreachable: Host 18: Channel is closed</div><div class="line">2014-03-13 16:15:31,375 DEBUG [agent.manager.AgentAttache] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Seq 18-1940796686: Cancelling.</div><div class="line">2014-03-13 16:15:31,375 DEBUG [CloudStack.storage.RemoteHostEndPoint] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Failed to send command, due to Agent:15, com.cloud.exception.AgentUnavailableException: Resource [Host:18] is unreachable: Host 18: Channel is closed</div><div class="line">2014-03-13 16:15:31,375 DEBUG [storage.motion.AncientDataMotionStrategy] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) copy object failed: </div><div class="line">com.cloud.utils.exception.CloudRuntimeException: Failed to send command, due to Agent:15, com.cloud.exception.AgentUnavailableException: Resource [Host:18] is unreachable: Host 18: Channel is closed</div><div class="line">	at org.apache.CloudStack.storage.RemoteHostEndPoint.sendMessage(RemoteHostEndPoint.java:104)</div><div class="line">	at org.apache.CloudStack.storage.motion.AncientDataMotionStrategy.copyObject(AncientDataMotionStrategy.java:210)</div><div class="line">	at org.apache.CloudStack.storage.motion.AncientDataMotionStrategy.copyAsync(AncientDataMotionStrategy.java:411)</div><div class="line">	at org.apache.CloudStack.storage.motion.DataMotionServiceImpl.copyAsync(DataMotionServiceImpl.java:55)</div><div class="line">	at org.apache.CloudStack.storage.volume.VolumeServiceImpl.createBaseImageAsync(VolumeServiceImpl.java:440)</div><div class="line">	at org.apache.CloudStack.storage.volume.VolumeServiceImpl.createVolumeFromTemplateAsync(VolumeServiceImpl.java:569)</div><div class="line">	at com.cloud.storage.VolumeManagerImpl.recreateVolume(VolumeManagerImpl.java:2536)</div><div class="line">	at com.cloud.storage.VolumeManagerImpl.prepare(VolumeManagerImpl.java:2592)</div><div class="line">	at com.cloud.vm.VirtualMachineManagerImpl.advanceStart(VirtualMachineManagerImpl.java:889)</div><div class="line">	at com.cloud.vm.VirtualMachineManagerImpl.start(VirtualMachineManagerImpl.java:578)</div><div class="line">	at org.apache.CloudStack.engine.cloud.entity.api.VMEntityManagerImpl.deployVirtualMachine(VMEntityManagerImpl.java:237)</div><div class="line">	at org.apache.CloudStack.engine.cloud.entity.api.VirtualMachineEntityImpl.deploy(VirtualMachineEntityImpl.java:209)</div><div class="line">	at com.cloud.vm.UserVmManagerImpl.startVirtualMachine(UserVmManagerImpl.java:3406)</div><div class="line">	at com.cloud.vm.UserVmManagerImpl.startVirtualMachine(UserVmManagerImpl.java:2966)</div><div class="line">	at com.cloud.vm.UserVmManagerImpl.startVirtualMachine(UserVmManagerImpl.java:2952)</div><div class="line">	at com.cloud.utils.component.ComponentInstantiationPostProcessor$InterceptorDispatcher.intercept(ComponentInstantiationPostProcessor.java:125)</div><div class="line">	at org.apache.CloudStack.api.command.user.vm.DeployVMCmd.execute(DeployVMCmd.java:420)</div><div class="line">	at com.cloud.api.ApiDispatcher.dispatch(ApiDispatcher.java:158)</div><div class="line">	at com.cloud.async.AsyncJobManagerImpl$1.run(AsyncJobManagerImpl.java:531)</div><div class="line">	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)</div><div class="line">	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)</div><div class="line">	at java.util.concurrent.FutureTask.run(FutureTask.java:166)</div><div class="line">	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1146)</div><div class="line">	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</div><div class="line">	at java.lang.Thread.run(Thread.java:679)</div><div class="line">2014-03-13 16:15:31,376 DEBUG [storage.motion.AncientDataMotionStrategy] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) copy failed</div><div class="line">com.cloud.utils.exception.CloudRuntimeException: com.cloud.utils.exception.CloudRuntimeException: Failed to send command, due to Agent:15, com.cloud.exception.AgentUnavailableException: Resource [Host:18] is unreachable: Host 18: Channel is closed</div><div class="line">	at org.apache.CloudStack.storage.motion.AncientDataMotionStrategy.copyObject(AncientDataMotionStrategy.java:231)</div><div class="line">	at org.apache.CloudStack.storage.motion.AncientDataMotionStrategy.copyAsync(AncientDataMotionStrategy.java:411)</div><div class="line">	at org.apache.CloudStack.storage.motion.DataMotionServiceImpl.copyAsync(DataMotionServiceImpl.java:55)</div><div class="line">	at org.apache.CloudStack.storage.volume.VolumeServiceImpl.createBaseImageAsync(VolumeServiceImpl.java:440)</div><div class="line">	at org.apache.CloudStack.storage.volume.VolumeServiceImpl.createVolumeFromTemplateAsync(VolumeServiceImpl.java:569)</div><div class="line">	at com.cloud.storage.VolumeManagerImpl.recreateVolume(VolumeManagerImpl.java:2536)</div><div class="line">	at com.cloud.storage.VolumeManagerImpl.prepare(VolumeManagerImpl.java:2592)</div><div class="line">	at com.cloud.vm.VirtualMachineManagerImpl.advanceStart(VirtualMachineManagerImpl.java:889)</div><div class="line">	at com.cloud.vm.VirtualMachineManagerImpl.start(VirtualMachineManagerImpl.java:578)</div><div class="line">	at org.apache.CloudStack.engine.cloud.entity.api.VMEntityManagerImpl.deployVirtualMachine(VMEntityManagerImpl.java:237)</div><div class="line">	at org.apache.CloudStack.engine.cloud.entity.api.VirtualMachineEntityImpl.deploy(VirtualMachineEntityImpl.java:209)</div><div class="line">	at com.cloud.vm.UserVmManagerImpl.startVirtualMachine(UserVmManagerImpl.java:3406)</div><div class="line">	at com.cloud.vm.UserVmManagerImpl.startVirtualMachine(UserVmManagerImpl.java:2966)</div><div class="line">	at com.cloud.vm.UserVmManagerImpl.startVirtualMachine(UserVmManagerImpl.java:2952)</div><div class="line">	at com.cloud.utils.component.ComponentInstantiationPostProcessor$InterceptorDispatcher.intercept(ComponentInstantiationPostProcessor.java:125)</div><div class="line">	at org.apache.CloudStack.api.command.user.vm.DeployVMCmd.execute(DeployVMCmd.java:420)</div><div class="line">	at com.cloud.api.ApiDispatcher.dispatch(ApiDispatcher.java:158)</div><div class="line">	at com.cloud.async.AsyncJobManagerImpl$1.run(AsyncJobManagerImpl.java:531)</div><div class="line">	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)</div><div class="line">	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)</div><div class="line">	at java.util.concurrent.FutureTask.run(FutureTask.java:166)</div><div class="line">	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1146)</div><div class="line">	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</div><div class="line">	at java.lang.Thread.run(Thread.java:679)</div><div class="line">2014-03-13 16:15:31,411 INFO  [storage.volume.VolumeServiceImpl] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) releasing lock for VMTemplateStoragePool 223</div><div class="line">2014-03-13 16:15:31,412 WARN  [utils.db.Merovingian2] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Was unable to find lock for the key template_spool_ref223 and thread id 1577994744</div><div class="line">2014-03-13 16:15:31,412 DEBUG [cloud.storage.VolumeManagerImpl] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Unable to create Vol[491|vm=301|ROOT]:com.cloud.utils.exception.CloudRuntimeException: com.cloud.utils.exception.CloudRuntimeException: Failed to send command, due to Agent:15, com.cloud.exception.AgentUnavailableException: Resource [Host:18] is unreachable: Host 18: Channel is closed</div><div class="line">2014-03-13 16:15:31,412 INFO  [cloud.vm.VirtualMachineManagerImpl] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Unable to contact resource.</div><div class="line">com.cloud.exception.StorageUnavailableException: Resource [StoragePool:23] is unreachable: Unable to create Vol[491|vm=301|ROOT]:com.cloud.utils.exception.CloudRuntimeException: com.cloud.utils.exception.CloudRuntimeException: Failed to send command, due to Agent:15, com.cloud.exception.AgentUnavailableException: Resource [Host:18] is unreachable: Host 18: Channel is closed</div><div class="line">	at com.cloud.storage.VolumeManagerImpl.recreateVolume(VolumeManagerImpl.java:2544)</div><div class="line">	at com.cloud.storage.VolumeManagerImpl.prepare(VolumeManagerImpl.java:2592)</div><div class="line">	at com.cloud.vm.VirtualMachineManagerImpl.advanceStart(VirtualMachineManagerImpl.java:889)</div><div class="line">	at com.cloud.vm.VirtualMachineManagerImpl.start(VirtualMachineManagerImpl.java:578)</div><div class="line">	at org.apache.CloudStack.engine.cloud.entity.api.VMEntityManagerImpl.deployVirtualMachine(VMEntityManagerImpl.java:237)</div><div class="line">	at org.apache.CloudStack.engine.cloud.entity.api.VirtualMachineEntityImpl.deploy(VirtualMachineEntityImpl.java:209)</div><div class="line">	at com.cloud.vm.UserVmManagerImpl.startVirtualMachine(UserVmManagerImpl.java:3406)</div><div class="line">	at com.cloud.vm.UserVmManagerImpl.startVirtualMachine(UserVmManagerImpl.java:2966)</div><div class="line">	at com.cloud.vm.UserVmManagerImpl.startVirtualMachine(UserVmManagerImpl.java:2952)</div><div class="line">	at com.cloud.utils.component.ComponentInstantiationPostProcessor$InterceptorDispatcher.intercept(ComponentInstantiationPostProcessor.java:125)</div><div class="line">	at org.apache.CloudStack.api.command.user.vm.DeployVMCmd.execute(DeployVMCmd.java:420)</div><div class="line">	at com.cloud.api.ApiDispatcher.dispatch(ApiDispatcher.java:158)</div><div class="line">	at com.cloud.async.AsyncJobManagerImpl$1.run(AsyncJobManagerImpl.java:531)</div><div class="line">	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)</div><div class="line">	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)</div><div class="line">	at java.util.concurrent.FutureTask.run(FutureTask.java:166)</div><div class="line">	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1146)</div><div class="line">	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</div><div class="line">	at java.lang.Thread.run(Thread.java:679)</div><div class="line">2014-03-13 16:15:31,425 DEBUG [cloud.vm.VirtualMachineManagerImpl] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Cleaning up resources for the vm VM[User|DSJAppServer01] in Starting state</div><div class="line">2014-03-13 16:15:31,428 DEBUG [agent.transport.Request] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Seq 14-1829315172: Sending  { Cmd , MgmtId: 345050394595, via: 14, Ver: v1, Flags: 100111, [{"com.cloud.agent.api.StopCommand":{"isProxy":false,"executeInSequence":true,"vmName":"i-28-301-VM","wait":0}}] }</div><div class="line">2014-03-13 16:15:31,428 DEBUG [agent.transport.Request] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Seq 14-1829315172: Executing:  { Cmd , MgmtId: 345050394595, via: 14, Ver: v1, Flags: 100111, [{"com.cloud.agent.api.StopCommand":{"isProxy":false,"executeInSequence":true,"vmName":"i-28-301-VM","wait":0}}] }</div><div class="line">2014-03-13 16:15:31,429 DEBUG [agent.manager.DirectAgentAttache] (DirectAgent-431:null) Seq 14-1829315172: Executing request</div><div class="line">2014-03-13 16:15:31,429 INFO  [vmware.resource.VmwareResource] (DirectAgent-431:172.22.1.6) Executing resource StopCommand: {"isProxy":false,"executeInSequence":true,"vmName":"i-28-301-VM","wait":0}</div><div class="line">2014-03-13 16:15:31,429 DEBUG [vmware.mo.HostMO] (DirectAgent-431:172.22.1.6) find VM i-28-301-VM on host</div><div class="line">2014-03-13 16:15:31,429 INFO  [vmware.mo.HostMO] (DirectAgent-431:172.22.1.6) VM i-28-301-VM not found in host cache</div><div class="line">2014-03-13 16:15:31,429 DEBUG [vmware.mo.HostMO] (DirectAgent-431:172.22.1.6) load VM cache on host</div><div class="line">2014-03-13 16:15:31,444 INFO  [vmware.resource.VmwareResource] (DirectAgent-431:172.22.1.6) VM i-28-301-VM is no longer in vSphere</div><div class="line">2014-03-13 16:15:31,445 DEBUG [agent.manager.DirectAgentAttache] (DirectAgent-431:null) Seq 14-1829315172: Response Received: </div><div class="line">2014-03-13 16:15:31,445 DEBUG [agent.transport.Request] (DirectAgent-431:null) Seq 14-1829315172: Processing:  { Ans: , MgmtId: 345050394595, via: 14, Ver: v1, Flags: 110, [{"com.cloud.agent.api.StopAnswer":{"vncPort":0,"result":true,"details":"VM i-28-301-VM is no longer in vSphere","wait":0}}] }</div><div class="line">2014-03-13 16:15:31,445 DEBUG [agent.manager.AgentAttache] (DirectAgent-431:null) Seq 14-1829315172: No more commands found</div><div class="line">2014-03-13 16:15:31,445 DEBUG [agent.transport.Request] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Seq 14-1829315172: Received:  { Ans: , MgmtId: 345050394595, via: 14, Ver: v1, Flags: 110, { StopAnswer } }</div><div class="line">2014-03-13 16:15:31,462 DEBUG [cloud.network.NetworkManagerImpl] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Changing active number of nics for network id=222 on -1</div><div class="line">2014-03-13 16:15:31,762 DEBUG [cloud.vm.VirtualMachineManagerImpl] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Successfully released network resources for the vm VM[User|DSJAppServer01]</div><div class="line">2014-03-13 16:15:31,762 DEBUG [cloud.vm.VirtualMachineManagerImpl] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Successfully cleanued up resources for the vm VM[User|DSJAppServer01] in Starting state</div><div class="line">2014-03-13 16:15:31,785 DEBUG [cloud.deploy.DeploymentPlanningManagerImpl] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Deploy avoids pods: [], clusters: [], hosts: [14, 15]</div><div class="line">2014-03-13 16:15:31,787 DEBUG [cloud.deploy.DeploymentPlanningManagerImpl] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) DeploymentPlanner allocation algorithm: com.cloud.deploy.FirstFitPlanner_EnhancerByCloudStack_a648ceb@5f712485</div><div class="line">2014-03-13 16:15:31,787 DEBUG [cloud.deploy.DeploymentPlanningManagerImpl] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Trying to allocate a host and storage pools from dc:2, pod:2,cluster:null, requested cpu: 12000, requested ram: 68719476736</div><div class="line">2014-03-13 16:15:31,787 DEBUG [cloud.deploy.DeploymentPlanningManagerImpl] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Is ROOT volume READY (pool already allocated)?: No</div><div class="line">2014-03-13 16:15:31,788 DEBUG [cloud.deploy.FirstFitPlanner] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Searching resources only under specified Pod: 2</div><div class="line">2014-03-13 16:15:31,788 DEBUG [cloud.deploy.FirstFitPlanner] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Listing clusters in order of aggregate capacity, that have (atleast one host with) enough CPU and RAM capacity under this Pod: 2</div><div class="line">2014-03-13 16:15:31,796 DEBUG [cloud.deploy.FirstFitPlanner] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Removing from the clusterId list these clusters from avoid set: []</div><div class="line">2014-03-13 16:15:31,808 DEBUG [cloud.deploy.DeploymentPlanningManagerImpl] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Checking resources in Cluster: 5 under Pod: 2</div><div class="line">2014-03-13 16:15:31,808 DEBUG [allocator.impl.FirstFitAllocator] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ] FirstFitRoutingAllocator) Looking for hosts in dc: 2  pod:2  cluster:5</div><div class="line">2014-03-13 16:15:31,814 DEBUG [allocator.impl.FirstFitAllocator] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ] FirstFitRoutingAllocator) FirstFitAllocator has 2 hosts to check for allocation: [Host[-14-Routing], Host[-15-Routing]]</div><div class="line">2014-03-13 16:15:31,824 DEBUG [allocator.impl.FirstFitAllocator] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ] FirstFitRoutingAllocator) Found 2 hosts for allocation after prioritization: [Host[-14-Routing], Host[-15-Routing]]</div><div class="line">2014-03-13 16:15:31,824 DEBUG [allocator.impl.FirstFitAllocator] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ] FirstFitRoutingAllocator) Looking for speed=12000Mhz, Ram=65536</div><div class="line">2014-03-13 16:15:31,824 DEBUG [allocator.impl.FirstFitAllocator] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ] FirstFitRoutingAllocator) Host name: 172.22.1.6, hostId: 14 is in avoid set, skipping this and trying other available hosts</div><div class="line">2014-03-13 16:15:31,824 DEBUG [allocator.impl.FirstFitAllocator] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ] FirstFitRoutingAllocator) Host name: 172.22.1.1, hostId: 15 is in avoid set, skipping this and trying other available hosts</div><div class="line">2014-03-13 16:15:31,824 DEBUG [allocator.impl.FirstFitAllocator] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ] FirstFitRoutingAllocator) Host Allocator returning 0 suitable hosts</div><div class="line">2014-03-13 16:15:31,824 DEBUG [cloud.deploy.DeploymentPlanningManagerImpl] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) No suitable hosts found</div><div class="line">2014-03-13 16:15:31,824 DEBUG [cloud.deploy.DeploymentPlanningManagerImpl] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) No suitable hosts found under this Cluster: 5</div><div class="line">2014-03-13 16:15:31,830 DEBUG [cloud.deploy.DeploymentPlanningManagerImpl] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Could not find suitable Deployment Destination for this VM under any clusters, returning. </div><div class="line">2014-03-13 16:15:31,830 DEBUG [cloud.deploy.FirstFitPlanner] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Searching resources only under specified Pod: 2</div><div class="line">2014-03-13 16:15:31,831 DEBUG [cloud.deploy.FirstFitPlanner] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Listing clusters in order of aggregate capacity, that have (atleast one host with) enough CPU and RAM capacity under this Pod: 2</div><div class="line">2014-03-13 16:15:31,837 DEBUG [cloud.deploy.FirstFitPlanner] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Removing from the clusterId list these clusters from avoid set: [5]</div><div class="line">2014-03-13 16:15:31,840 DEBUG [cloud.deploy.FirstFitPlanner] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) No clusters found after removing disabled clusters and clusters in avoid list, returning.</div><div class="line">2014-03-13 16:15:31,868 DEBUG [cloud.capacity.CapacityManagerImpl] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) VM state transitted from :Starting to Stopped with event: OperationFailedvm's original host id: null new host id: null host id before state transition: 14</div><div class="line">2014-03-13 16:15:31,881 DEBUG [cloud.capacity.CapacityManagerImpl] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Hosts's actual total CPU: 64000 and CPU after applying overprovisioning: 1280000</div><div class="line">2014-03-13 16:15:31,881 DEBUG [cloud.capacity.CapacityManagerImpl] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Hosts's actual total RAM: 549746139136 and RAM after applying overprovisioning: 10994923339776</div><div class="line">2014-03-13 16:15:31,881 DEBUG [cloud.capacity.CapacityManagerImpl] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) release cpu from host: 14, old used: 28500,reserved: 0, actual total: 64000, total with overprovisioning: 1280000; new used: 16500,reserved:0; movedfromreserved: false,moveToReserveredfalse</div><div class="line">2014-03-13 16:15:31,881 DEBUG [cloud.capacity.CapacityManagerImpl] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) release mem from host: 14, old used: 137707388928,reserved: 0, total: 10994923339776; new used: 68987912192,reserved:0; movedfromreserved: false,moveToReserveredfalse</div><div class="line">2014-03-13 16:15:31,923 DEBUG [cloud.vm.UserVmManagerImpl] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Destroying vm VM[User|DSJAppServer01] as it failed to create on Host with Id:15</div><div class="line">2014-03-13 16:15:31,954 DEBUG [cloud.capacity.CapacityManagerImpl] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) VM state transitted from :Stopped to Error with event: OperationFailedToErrorvm's original host id: null new host id: null host id before state transition: null</div><div class="line">2014-03-13 16:15:32,033 WARN  [apache.CloudStack.alerts] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ])  alertType:: 8 // dataCenterId:: 2 // podId:: 2 // clusterId:: null // message:: Failed to deploy Vm with Id: 301, on Host with Id: 15</div><div class="line">2014-03-13 16:15:32,136 INFO  [user.vm.DeployVMCmd] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) com.cloud.exception.InsufficientServerCapacityException: Unable to create a deployment for VM[User|DSJAppServer01]Scope=interface com.cloud.dc.DataCenter; id=2</div><div class="line">2014-03-13 16:15:32,136 INFO  [user.vm.DeployVMCmd] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Unable to create a deployment for VM[User|DSJAppServer01]</div><div class="line">com.cloud.exception.InsufficientServerCapacityException: Unable to create a deployment for VM[User|DSJAppServer01]Scope=interface com.cloud.dc.DataCenter; id=2</div><div class="line">	at com.cloud.vm.VirtualMachineManagerImpl.advanceStart(VirtualMachineManagerImpl.java:842)</div><div class="line">	at com.cloud.vm.VirtualMachineManagerImpl.start(VirtualMachineManagerImpl.java:578)</div><div class="line">	at org.apache.CloudStack.engine.cloud.entity.api.VMEntityManagerImpl.deployVirtualMachine(VMEntityManagerImpl.java:237)</div><div class="line">	at org.apache.CloudStack.engine.cloud.entity.api.VirtualMachineEntityImpl.deploy(VirtualMachineEntityImpl.java:209)</div><div class="line">	at com.cloud.vm.UserVmManagerImpl.startVirtualMachine(UserVmManagerImpl.java:3406)</div><div class="line">	at com.cloud.vm.UserVmManagerImpl.startVirtualMachine(UserVmManagerImpl.java:2966)</div><div class="line">	at com.cloud.vm.UserVmManagerImpl.startVirtualMachine(UserVmManagerImpl.java:2952)</div><div class="line">	at com.cloud.utils.component.ComponentInstantiationPostProcessor$InterceptorDispatcher.intercept(ComponentInstantiationPostProcessor.java:125)</div><div class="line">	at org.apache.CloudStack.api.command.user.vm.DeployVMCmd.execute(DeployVMCmd.java:420)</div><div class="line">	at com.cloud.api.ApiDispatcher.dispatch(ApiDispatcher.java:158)</div><div class="line">	at com.cloud.async.AsyncJobManagerImpl$1.run(AsyncJobManagerImpl.java:531)</div><div class="line">	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)</div><div class="line">	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)</div><div class="line">	at java.util.concurrent.FutureTask.run(FutureTask.java:166)</div><div class="line">	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1146)</div><div class="line">	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</div><div class="line">	at java.lang.Thread.run(Thread.java:679)</div><div class="line">2014-03-13 16:15:32,140 DEBUG [cloud.async.AsyncJobManagerImpl] (Job-Executor-8:job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ]) Complete async job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ], jobStatus: 2, resultCode: 530, result: Error Code: 533 Error text: Unable to create a deployment for VM[User|DSJAppServer01]</div><div class="line">2014-03-13 16:15:32,424 DEBUG [cloud.api.ApiServlet] (catalina-exec-6:null) ===START===  172.30.22.1 -- GET  sessionkey=2x5T5NMxyGWnBzgLBdgMnJ8dsrU%3D&response=json&listall=True&keyword=dsj&command=listVirtualMachines</div><div class="line">2014-03-13 16:15:32,467 DEBUG [cloud.api.ApiServlet] (catalina-exec-6:null) ===END===  172.30.22.1 -- GET  sessionkey=2x5T5NMxyGWnBzgLBdgMnJ8dsrU%3D&response=json&listall=True&keyword=dsj&command=listVirtualMachines</div><div class="line">2014-03-13 16:15:33,252 DEBUG [cloud.api.ApiServlet] (catalina-exec-1:null) ===START===  172.30.22.1 -- GET  sessionkey=2x5T5NMxyGWnBzgLBdgMnJ8dsrU%3D&command=queryAsyncJobResult&response=json&jobid=5fa4d6ef-5596-4043-98ac-5a4defed54ee</div><div class="line">2014-03-13 16:15:33,278 DEBUG [cloud.async.AsyncJobManagerImpl] (catalina-exec-1:null) Async job-1131 = [ 5fa4d6ef-5596-4043-98ac-5a4defed54ee ] completed</div><div class="line">2014-03-13 16:15:33,286 DEBUG [cloud.api.ApiServlet] (catalina-exec-1:null) ===END===  172.30.22.1 -- GET  sessionkey=2x5T5NMxyGWnBzgLBdgMnJ8dsrU%3D&command=queryAsyncJobResult&response=json&jobid=5fa4d6ef-5596-4043-98ac-5a4defed54ee</div><div class="line">2014-03-13 16:15:39,618 DEBUG [agent.manager.AgentManagerImpl] (AgentManager-Handler-1:null) SeqA 8-147828: Processing Seq 8-147828:  { Cmd , MgmtId: -1, via: 8, Ver: v1, Flags: 11, [{"com.cloud.agent.api.ConsoleProxyLoadReportCommand":{"_proxyVmId":85,"_loadInfo":"{\n  \"connections\": []\n}","wait":0}}] }</div><div class="line">2014-03-13 16:15:39,631 DEBUG [agent.manager.AgentManagerImpl] (AgentManager-Handler-1:null) SeqA 8-147828: Sending Seq 8-147828:  { Ans: , MgmtId: 345050394595, via: 8, Ver: v1, Flags: 100010, [{"com.cloud.agent.api.AgentControlAnswer":{"result":true,"wait":0}}] }</div><div class="line">2014-03-13 16:15:41,807 DEBUG [cloud.server.StatsCollector] (StatsCollector-1:null) StorageCollector is running...</div><div class="line">2014-03-13 16:15:41,877 DEBUG [agent.transport.Request] (StatsCollector-1:null) Seq 13-1827806745: Received:  { Ans: , MgmtId: 345050394595, via: 13, Ver: v1, Flags: 10, { GetStorageStatsAnswer } }</div><div class="line">2014-03-13 16:15:41,884 INFO  [agent.manager.AgentAttache] (StatsCollector-1:null) Seq 18-1940796687: Unable to send due to Resource [Host:18] is unreachable: Host 18: Channel is closed</div><div class="line">2014-03-13 16:15:41,884 DEBUG [agent.manager.AgentAttache] (StatsCollector-1:null) Seq 18-1940796687: Cancelling.</div><div class="line">2014-03-13 16:15:41,884 DEBUG [CloudStack.storage.RemoteHostEndPoint] (StatsCollector-1:null) Failed to send command, due to Agent:18, com.cloud.exception.AgentUnavailableException: Resource [Host:18] is unreachable: Host 18: Channel is closed</div><div class="line">2014-03-13 16:15:41,884 ERROR [cloud.server.StatsCollector] (StatsCollector-1:null) Error trying to retrieve storage stats</div><div class="line">com.cloud.utils.exception.CloudRuntimeException: Failed to send command, due to Agent:18, com.cloud.exception.AgentUnavailableException: Resource [Host:18] is unreachable: Host 18: Channel is closed</div><div class="line">	at org.apache.CloudStack.storage.RemoteHostEndPoint.sendMessage(RemoteHostEndPoint.java:104)</div><div class="line">	at com.cloud.server.StatsCollector$StorageCollector.run(StatsCollector.java:545)</div><div class="line">	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)</div><div class="line">	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:351)</div><div class="line">	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:178)</div><div class="line">	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:165)</div><div class="line">	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:267)</div><div class="line">	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1146)</div><div class="line">	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</div><div class="line">	at java.lang.Thread.run(Thread.java:679)</div></pre></td></tr></table></figure>

<h3 id="解决方法">解决方法</h3>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span>根据log输出判断是存储的问题,由于secondary storage在远程data vcent,log中抛出,有 lock,我们可以销毁secondary来解决这个问题.</div><div class="line"><span class="number">2.</span>销毁secondary后发现所有的模板没有了,那是因为我们的serconary在远程data vcent,我们的网络中划分了vlan,当销毁第<span class="number">2</span>个secondary的时候,system重建secondary vm后不会刷新network vlan,这时我们需要手动输入想对应的vlan即可解决问题.</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>1.今天创建vm,抛出以下异常<br>通过以下方法可以解决<br>]]>
    
    </summary>
    
      <category term="CloudStack-errorlog" scheme="http://cloudbps.com/categories/CloudStack-errorlog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mac add route]]></title>
    <link href="http://cloudbps.com/2014/03/11/mac_route/"/>
    <id>http://cloudbps.com/2014/03/11/mac_route/</id>
    <published>2014-03-11T02:44:33.000Z</published>
    <updated>2015-01-10T08:31:20.000Z</updated>
    <content type="html"><![CDATA[<p>And because i feel lucky today, (0n a Friday the 13th, that looks kind of odd), here’s another how-to. This is how I added a static route on some Xserves.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="constant">Simple</span> <span class="symbol">solution:</span> route -n add <span class="number">10.0</span>.<span class="number">0</span>.<span class="number">0</span>/<span class="number">8</span> <span class="number">10.16</span>.<span class="number">3.254</span></div></pre></td></tr></table></figure>

<p>Permanent solution: Add a startup item (to avoid doing the above command every reboot)</p>
<p>cd /System/Library/StartupItems<br>mkdir AddRoutes<br>cd AddRoutes</p>
<p>Create a file called AddRoutes (note: same as the folder name)<br>vi AddRoutes</p>
<a id="more"></a>

<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/bin/sh</span></div><div class="line"></div><div class="line"><span class="comment"># Set static routing tables</span></div><div class="line"></div><div class="line">. /etc/rc.common</div><div class="line"></div><div class="line"><span class="constant">StartService</span> ()</div><div class="line">{</div><div class="line"><span class="keyword">if</span> [ <span class="string">"${ADDROUTES:=-NO-}"</span> = <span class="string">"-YES-"</span> ]; <span class="keyword">then</span></div><div class="line"><span class="constant">ConsoleMessage</span> “<span class="constant">Adding</span> <span class="constant">Static</span> <span class="constant">Routing</span> <span class="constant">Table</span>”</div><div class="line">sudo route -nv add <span class="number">10.0</span>.<span class="number">0</span>.<span class="number">0</span>/<span class="number">8</span> <span class="number">10.16</span>.<span class="number">3.254</span></div><div class="line">fi</div><div class="line">}</div><div class="line"></div><div class="line"><span class="constant">StopService</span> ()</div><div class="line">{</div><div class="line"><span class="keyword">return</span> <span class="number">0</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="constant">StopService</span> ()</div><div class="line">{</div><div class="line"><span class="keyword">return</span> <span class="number">0</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="constant">RestartService</span> ()</div><div class="line">{</div><div class="line"><span class="keyword">return</span> <span class="number">0</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>RunService “$1″</p>
<p>Then create a file StartupParameters.plist</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line"><span class="constant">Description</span> = “<span class="constant">Add</span> static routing tables”;</div><div class="line"><span class="constant">Provides</span> = (”<span class="constant">AddRoutes</span>”);</div><div class="line"><span class="constant">Requires</span> = (”<span class="constant">Network</span>”);</div><div class="line"><span class="constant">OrderPreference</span> = “<span class="constant">None</span>”;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Then change permissions:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod <span class="number">755</span> <span class="constant">AddRoutes</span> <span class="constant">StartupParameters</span>.plist</div></pre></td></tr></table></figure>

<p>Reboot your computer. Verify with netstat -nr</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>And because i feel lucky today, (0n a Friday the 13th, that looks kind of odd), here’s another how-to. This is how I added a static route on some Xserves.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="constant">Simple</span> <span class="symbol">solution:</span> route -n add <span class="number">10.0</span>.<span class="number">0</span>.<span class="number">0</span>/<span class="number">8</span> <span class="number">10.16</span>.<span class="number">3.254</span></div></pre></td></tr></table></figure>

<p>Permanent solution: Add a startup item (to avoid doing the above command every reboot)</p>
<p>cd /System/Library/StartupItems<br>mkdir AddRoutes<br>cd AddRoutes</p>
<p>Create a file called AddRoutes (note: same as the folder name)<br>vi AddRoutes</p>
]]>
    
    </summary>
    
      <category term="Linux Tools" scheme="http://cloudbps.com/categories/Linux-Tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Glusterfs(分布式文件系统)]]></title>
    <link href="http://cloudbps.com/2014/03/06/glusterfs/"/>
    <id>http://cloudbps.com/2014/03/06/glusterfs/</id>
    <published>2014-03-05T16:19:00.000Z</published>
    <updated>2015-01-10T08:29:40.000Z</updated>
    <content type="html"><![CDATA[<h4 id="一-Gluster简介">一.Gluster简介</h4>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="constant">Glusterfs</span>是一个开源分布式文件系统，具有强大的横向扩展能力，通过扩展可以支持<span class="constant">PB</span>以上的容量<span class="constant">GlusterFS</span>借助<span class="constant">TCP</span>/<span class="constant">IP</span>或<span class="constant">InfiniBand</span> <span class="constant">RDMA</span>网络将物理分布的存储资源聚集在一起，</div><div class="line">使用单一全局命名空间来管理数据。<span class="constant">GlusterFS</span>基于可堆叠的用户空间设计，可为各种不同的数据负载提供优异的性能。</div></pre></td></tr></table></figure>

<p><img src="http://ww1.sinaimg.cn/large/dd1b8f59gw1ee5ccslxocj208c06qaae.jpg" alt=""></p>
<h6 id="统一挂载点">统一挂载点</h6>
<a id="more"></a>

<h4 id="二-Glusterfs主要特征">二.Glusterfs主要特征</h4>
<pre><code><span class="number">1</span>.扩展和高性能
<span class="number">2</span>.高可用
<span class="number">3</span>.全局统一命名空间
<span class="number">4</span>.弹性<span class="built_in">hash</span>
<span class="number">5</span>.弹性卷管理
<span class="number">6</span>.基于标准协议
</code></pre><h4 id="三-总体设计架构">三.总体设计架构</h4>
<p><img src="http://ww1.sinaimg.cn/large/dd1b8f59gw1ee5cazfspbj20me0fg41k.jpg" alt=""></p>
<h4 id="四-Translators">四.Translators</h4>
<ol>
<li>Translators是GlusterFS提供的一种强大文件系统功能扩展机制,GlusterFS中所有的功能都通过Translator机制实现，运行时以动态库方式进行加载，服务端和客户端相互兼容</li>
<li>Cluster Translators，它是实现GlusterFS集群存储的核心，它包括AFR（Automatic File Replication）、DHT（Distributed Hash Table）和Stripe三种类型。</li>
<li><blockquote>
<p> AFR相当于RAID1，同一文件在多个存储节点上保留多份，主要用于实现高可用性以及数据自动修复。AFR所有子卷上具有相同的名字空间，查找文件时从第一个节点开始，直到搜索成功或最后节点搜索完毕。读数据时，AFR会把所有请求调度到所有存储节点，进行负载均衡以提高系统性能。写数据时，首先需要在所有锁服务器上对文件加锁，默认第一个节点为锁服务器，可以指定多个。然后，AFR以日志事件方式对所有服务器进行写数据操作，成功后删除日志并解锁。AFR会自动检测并修复同一文件的数据不一致性，它使用更改日志来确定好的数据副本。自动修复在文件目录首次访问时触发，如果是目录将在所有子卷上复制正确数据，如果文件不存则创建，文件信息不匹配则修复，日志指示更新则进行更新。</p>
</blockquote>
</li>
<li><blockquote>
<p>DHT即上面所介绍的弹性哈希算法，它采用hash方式进行数据分布，名字空间分布在所有节点上。查找文件时，通过弹性哈希算法进行，不依赖名字空间。但遍历文件目录时，则实现较为复杂和低效，需要搜索所有的存储节点。单一文件只会调度到唯一的存储节点，一旦文件被定位后，读写模式相对简单。DHT不具备容错能力，需要借助AFR实现高可用性, 如图5所示应用案例。</p>
</blockquote>
</li>
<li><blockquote>
<p>Stripe相当于RAID0，即分片存储，文件被划分成固定长度的数据分片以Round-Robin轮转方式存储在所有存储节点。Stripe所有存储节点组成完整的名字空间，查找文件时需要询问所有节点，这点非常低效。读写数据时，Stripe涉及全部分片存储节点，操作可以在多个节点之间并发执行，性能非常高。Stripe通常与AFR组合使用，构成RAID10/RAID01，同时获得高性能和高可用性，当然存储利用率会低于50%。<br>6</p>
</blockquote>
</li>
</ol>
<h4 id="四-Glusterfs卷type">四.Glusterfs卷type</h4>
<h6 id="2-striped_volume(条带卷)">2.striped volume(条带卷)</h6>
<p>类似RAID0的功能，使用与大并发下的大文件读写<br>create striped volume use will common</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">glusterfs volumn create volume_name striped_count  <span class="symbol">server1:</span>/data/r<span class="number">0</span> <span class="symbol">server2:</span>/data/r<span class="number">0</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h4 id="一-Gluster简介">一.Gluster简介</h4>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="constant">Glusterfs</span>是一个开源分布式文件系统，具有强大的横向扩展能力，通过扩展可以支持<span class="constant">PB</span>以上的容量<span class="constant">GlusterFS</span>借助<span class="constant">TCP</span>/<span class="constant">IP</span>或<span class="constant">InfiniBand</span> <span class="constant">RDMA</span>网络将物理分布的存储资源聚集在一起，</div><div class="line">使用单一全局命名空间来管理数据。<span class="constant">GlusterFS</span>基于可堆叠的用户空间设计，可为各种不同的数据负载提供优异的性能。</div></pre></td></tr></table></figure>

<p><img src="http://ww1.sinaimg.cn/large/dd1b8f59gw1ee5ccslxocj208c06qaae.jpg" alt=""></p>
<h6 id="统一挂载点">统一挂载点</h6>
]]>
    
    </summary>
    
      <category term="Glusterfs" scheme="http://cloudbps.com/categories/Glusterfs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux tty secure]]></title>
    <link href="http://cloudbps.com/2014/02/25/linux_tty/"/>
    <id>http://cloudbps.com/2014/02/25/linux_tty/</id>
    <published>2014-02-25T11:44:33.000Z</published>
    <updated>2015-01-10T08:30:38.000Z</updated>
    <content type="html"><![CDATA[<h4 id="Linux_tty_secure">Linux tty secure</h4>
<p>Almost everyone (not just system administrators) are forgetful and used to leave the Linux/Unix login session open (without logging out).</p>
<p>So, how to make sure all the Linux servers will automatically logout users after idle for certain minutes?</p>
<p>Don’t worry. There is no tedious configuration or additional package to be installed to make this happen.</p>
<p>In fact, the simplest way is to configure the TMOUT environment variable!</p>
<p><a id="more"></a><br>For example, this export command</p>
<p>export TMOUT=60</p>
<p>will immediately get the Linux OS to automatically logout an user after his/her login session being idle for 60 seconds or 1 minute!</p>
<p>The TMOUT environment variable is applied to a command line console login session only.</p>
<p>For X-window or GUI login, you can easily turn on any pretty auto-lock screen-saver, that works very much like those in Windows.</p>
<p>For testing purpose, you can set a lower limit. While login to Linux, su to another user ID and execute</p>
<p>export TMOUT=10</p>
<p>After being idle for 10 seconds, you’ll likely see this warning message appears and the su login session will be terminated or log out immediately.</p>
<p>timed out waiting for input: auto-logout</p>
<p>In order the apply TMOUT to all Linux login accounts, you can put that export command to the login scripts or login profile (.bash_profile or .profile) in respective user home directory.</p>
<p>But, the easiest way is to write the export command in the system profile instead of respective user’s profile!</p>
<p>That’s to say, you can append the export TMOUT=60 command to /etc/profile (i.e. the system profile)!</p>
<p>Bear in mind that any login user can simply overwrite this TMOUT setting!</p>
<p>For example, he or she can easily disable or extend the time-out value before auto-logout feature triggered. To disable the Linux auto-logout user feature, just set the TMOUT to zero, i.e.</p>
<p>export TMOUT=0</p>
<p>In addition, the Linux TMOUT environment variable will not effective if the user has an active or open document. For example, if the VI editor is open, the Linux auto-logout feature in command console will not working!</p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="Linux_tty_secure">Linux tty secure</h4>
<p>Almost everyone (not just system administrators) are forgetful and used to leave the Linux/Unix login session open (without logging out).</p>
<p>So, how to make sure all the Linux servers will automatically logout users after idle for certain minutes?</p>
<p>Don’t worry. There is no tedious configuration or additional package to be installed to make this happen.</p>
<p>In fact, the simplest way is to configure the TMOUT environment variable!</p>
<p>]]>
    
    </summary>
    
      <category term="Linux Secure" scheme="http://cloudbps.com/categories/Linux-Secure/"/>
    
  </entry>
  
</feed>
